import org.gradle.internal.component.external.model.ComponentVariant

// Dieses GradleSkript gibt die Publishing-Definition für Java-Artefakte vor
// Gradle Module können dies dann Nutzen und einzelne Informationen überschreiben
// um Redundanz vorzubeugen, bspw:
/*
apply from: "$rootDir/publish-helper.gradle"
publishing {
  publications {
    publishJava(MavenPublication) {
      artifactId = 'svws-server-app'
      pom {
        name = 'SVWS Server Application'
        description = 'Diese Bibliothek enthält den Java-Server für die Schulverwaltungssoftware in NRW'
      }
    }
  }
}
*/

publishing {
	publications {
		publishJava(MavenPublication) {
			from components.java
			versionMapping {
				usage('java-api') {
					fromResolutionOf('runtimeClasspath')
				}
				usage('java-runtime') {
					fromResolutionResult()
				}
			}
			pom {
				name = 'name'
				description = 'description'
				url = 'http://www.svws.nrw.de'
				licenses {
					license {
						name = 'BSD-3-Clause'
						url = 'https://opensource.org/licenses/BSD-3-Clause'
					}
				}
				scm {
					connection = 'scm:git@github.com/SVWS-NRW/SVWS-Server'
					developerConnection = 'scm:git@github.com/SVWS-NRW/SVWS-Server.git'
					url = 'https://github.com/SVWS-NRW/SVWS-Server.git'
				}
				developers {
					developer {
						id = 'svws-nrw'
						name = 'Schulverwaltung NRW'
						email = 'npm@svws-nrw.de'
					}
				}
			}
		}
	}
}

task signJars(type: Exec) {
	group 'signing'
	dependsOn rootProject.prepareSigning
	doFirst {
		def fileJarsToSign = new File("${projectDir}/build/jarsToSign.txt")
		fileJarsToSign.withWriter { w -> "" }
		fileTree(dir: "build/libs/", includes: ["**-${project.version}.jar"], excludes: ["**-javadoc.jar", "**-sources.jar"]).files.findAll {
			fileJarsToSign.withWriterAppend {
				w -> w << it.toString() << "\n"
			}
		}
	}
	workingDir file("${rootDir}/build/signing")
	commandLine = ["${rootDir}/config/signing/sign_jars.sh", "${projectDir}/build/jarsToSign.txt"]
}
