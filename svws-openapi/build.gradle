configurations {
	implementation.extendsFrom(crypto, database, jackson, jetty, resteasy, swagger, pdf)
	api
}

compileJava.dependsOn(":svws-db:assemble")
compileJava.dependsOn(":svws-db-utils:assemble")
compileJava.dependsOn(":svws-module-reporting:assemble")
compileJava.dependsOn(":svws-module-dav-api:assemble")

dependencies {
	implementation project(':svws-schulen')
	implementation project(':svws-core')
	implementation project(':svws-db')
	implementation project(':svws-db-dto')
	implementation project(':svws-db-utils')
	implementation project(':svws-module-reporting')
    implementation project(':svws-module-dav-api')
    
    api fileTree(dir: "$projectDir/src/main/java", includes: ['**/svws_nrw/api/server/*.java', '**/svws_nrw/api/privileged/API*.java'])
}

task cleanTranspiled(type: Delete) {
	group "build"
	delete fileTree(dir: "$buildDir/tsapi"), fileTree(dir: "$buildDir/tmp/transpiler/tsapi", includes: ["**/*.class"])
}

task prepareTranspile {
	doLast {
		file("$buildDir/transpiler-api-files.txt").text = configurations.api.files.toString().replace("[", "").replace("]", "").trim()
	}
	group "build"
	dependsOn compileJava
	inputs.files configurations.api
	outputs.files "$buildDir/transpiler-api-files.txt"
}

task transpile(type: JavaExec) {
	group "build"
	dependsOn project(':svws-transpile').tasks.assemble
	dependsOn project(":svws-schulen").tasks.assemble
	dependsOn project(":svws-core").tasks.assemble
	dependsOn compileJava
	dependsOn prepareTranspile
	doFirst {
		delete fileTree(dir: "$buildDir/tsapi"), fileTree(dir: "$buildDir/tmp/transpiler/tsapi", includes: ["**/*.class"])
	}
	inputs.files "$buildDir/transpiler-api-files.txt", configurations.api.files
	outputs.dir "$buildDir/tsapi"
	description = "Transpiliert den Java-Code nach Typescript"
	classpath = sourceSets.main.runtimeClasspath
	mainClass = "de.svws_nrw.transpiler.app.GenerateTsOpenApi"
	args "--output", "$buildDir/tsapi",
		"--ignore", "de.svws_nrw",
		"--tmpdir", "$buildDir/tmp/transpiler/tsapi",
		"--files", "$buildDir/transpiler-api-files.txt"
	jvmArgs "--add-opens", "jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED"
}

task assembleTranspiled(type: Copy) {
	group "build"
	dependsOn transpile
	inputs.dir "$rootDir/svws-schulen/build/ts"
	inputs.dir "$rootDir/svws-core/build/ts"
	inputs.dir "$buildDir/tsapi"
	outputs.dir "$rootDir/svws-webclient/core/src"
	doFirst {
		delete fileTree(dir: "$rootDir/svws-webclient/core/src", includes: ["**/*.ts"])
	}
	from "$rootDir/svws-schulen/build/ts"
	from "$rootDir/svws-core/build/ts"
	from "$buildDir/tsapi"
	into "$rootDir/svws-webclient/core/src"
	include "**/*.ts"
	exclude "index.ts"
	doLast {
		(new File("$rootDir/svws-webclient/core/src/index.ts")).text = file("$rootDir/svws-schulen/build/ts/index.ts").getText() + file("$rootDir/svws-core/build/ts/index.ts").getText() + file("$buildDir/tsapi/index.ts").getText()
	}
}

assemble.dependsOn assembleTranspiled



// TODO xml-apis belegt namespaces org.w3c.dom und javax.xml.namespace
// dies führt zu eclipse problemen (package accesible from more than one module),
// allerdings nicht zu problemen im gradle build.
// mit Herrn bachran absprechen, ob das so iO ist.
configurations.implementation {
  exclude group: 'xml-apis'
}

task createVersionProperties() {
	inputs.files "$rootDir/buildconfig.json"
    outputs.files "$projectDir/src/main/resources/config/version.properties"
    doLast {
        file("src/main/resources/config/version.properties").text = "svws.version=" + project.version.toString() + "\n"
    }
}

processResources.dependsOn createVersionProperties
sourcesJar.dependsOn createVersionProperties

apply from: "$rootDir/publish-helper.gradle"
publishing {
  publications {
    publishJava(MavenPublication) {
    artifactId = 'svws-openapi'
      pom {
        name = 'SVWS OpenApi Library'
        description = 'Diese Bibliothek enthält die Java-Server-Definition der OpenApi-Schnittstelle für die Schulverwaltungssoftware in NRW'
      }
    }
  }
}

