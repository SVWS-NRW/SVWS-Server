import org.gradle.internal.os.OperatingSystem

configurations {
	implementation.extendsFrom(crypto, database, jackson, jetty, resteasy, swagger, email)
}

dependencies {
    implementation project(':svws-core')
    implementation project(':svws-db')
    implementation project(':svws-db-dto')
	testImplementation 'org.mockito:mockito-inline:5.2.0'
	testImplementation 'org.mockito:mockito-junit-jupiter:5.2.0'
	testImplementation "org.assertj:assertj-core:3.25.3"
}

compileJava.dependsOn(":svws-core:assemble")
compileJava.dependsOn(":svws-db-dto:assemble")

/* TODO Support JPMS-Modules
extraJavaModuleInfo {
	module("jackcess-4.0.1.jar", "com.healthmarketscience.jackcess", "4.0.1") {
        exports("com.healthmarketscience.jackcess")
    }
    automaticModule("commons-logging-1.2.jar", "org.apache.commons.logging")
}
*/

apply from: "$rootDir/publish-helper.gradle"
publishing {
  publications {
    publishJava(MavenPublication) {
      artifactId = 'svws-db-utils'
      pom {
        name = 'SVWS DB Utils Library'
        description = 'Diese Bibliothek unterstützt bei dem Zugriff auf Datenbanken für die Schulverwaltungssoftware in NRW'
      }
    }
  }
}

task generateLegacyMDBs(type: JavaExec) {
	group = 'svws'
	dependsOn compileJava
	classpath = sourceSets.main.runtimeClasspath
    outputs.dir file(project.buildDir.toString() + '/mdb/')
    description "Erzeuge die vier Access-Datenbanken impexp.mdb, statkue.mdb, schildintern.mdb und schulver.mdb für die Verwendung mit Schild v2.x"
    mainClass = 'de.svws_nrw.db.utils.app.MDBGenerator'
    jvmArgs "-Dfile.encoding=UTF-8"
    args "-j"
}

task generateSQLScripts(type: JavaExec) {
	group = 'svws'
	dependsOn compileJava
	classpath = sourceSets.main.runtimeClasspath
    outputs.dir file(project.buildDir.toString() + '/sql/')
    description "Erzeuge SQL-Skripte für das Erstellen und Löschen eines Datenbankschemas sowie zum Befüllen eines Schemas mit Default-Daten"
    mainClass = 'de.svws_nrw.db.utils.app.SQLGenerator'
    jvmArgs "-Dfile.encoding=UTF-8"
    args "-a"
}


task createScripts {
	group = 'svws'
	dependsOn compileJava
	doLast {
		if (OperatingSystem.current().isLinux()) {
			file("./migrate_db.sh").text =
			  '#! /bin/bash\n' +
			  'java --class-path ' + sourceSets.main.runtimeClasspath.getAsPath() + ' de.svws_nrw.db.utils.app.MigrateDB "$@"\n'
			file("./create_db.sh").text =
			  '#! /bin/bash\n' +
			  'java --class-path ' + sourceSets.main.runtimeClasspath.getAsPath() + ' de.svws_nrw.db.utils.app.CreateSchema "$@"\n'
			file("./lupo_import.sh").text =
			  '#! /bin/bash\n' +
			  'java --class-path ' + sourceSets.main.runtimeClasspath.getAsPath() + ' de.svws_nrw.db.utils.lupo.app.ImportLupoMDB "$@"\n'
			file("./kurs42_import.sh").text =
			  '#! /bin/bash\n' +
			  'java --class-path ' + sourceSets.main.runtimeClasspath.getAsPath() + ' de.svws_nrw.db.utils.app.ImportKurs42Blockung "$@"\n'
			file("./export.sh").text =
			  '#! /bin/bash\n' +
			  'java --class-path ' + sourceSets.main.runtimeClasspath.getAsPath() + ' de.svws_nrw.db.utils.app.ExportDB "$@"\n'
			file("./import.sh").text =
			  '#! /bin/bash\n' +
			  'java --class-path ' + sourceSets.main.runtimeClasspath.getAsPath() + ' de.svws_nrw.db.utils.app.ImportDB "$@"\n'
			project.exec {
				commandLine('chmod',  '+x', './migrate_db.sh')
				commandLine('chmod',  '+x', './create_db.sh')
				commandLine('chmod',  '+x', './lupo_import.sh')
				commandLine('chmod',  '+x', './kurs42_import.sh')
				commandLine('chmod',  '+x', './export.sh')
				commandLine('chmod',  '+x', './import.sh')
			}
		} else if (OperatingSystem.current().isWindows()) {
			file("./migrate_db.cmd").text =
			  'java --class-path "' + sourceSets.main.runtimeClasspath.getAsPath() + '" de.svws_nrw.db.utils.app.MigrateDB %*\n'
			file("./create_db.cmd").text =
			  'java --class-path "' + sourceSets.main.runtimeClasspath.getAsPath() + '" de.svws_nrw.db.utils.app.CreateSchema %*\n'
			file("./lupo_import.cmd").text =
			  'java --class-path "' + sourceSets.main.runtimeClasspath.getAsPath() + '" de.svws_nrw.db.utils.lupo.app.ImportLupoMDB %*\n'
			file("./kurs42_import.cmd").text =
			  'java --class-path "' + sourceSets.main.runtimeClasspath.getAsPath() + '" de.svws_nrw.db.utils.app.ImportKurs42Blockung %*\n'
			file("./export.cmd").text =
			  'java --class-path "' + sourceSets.main.runtimeClasspath.getAsPath() + '" de.svws_nrw.db.utils.app.ExportDB %*\n'
			file("./import.cmd").text =
			  'java --class-path "' + sourceSets.main.runtimeClasspath.getAsPath() + '" de.svws_nrw.db.utils.app.ImportDB %*\n'
		} else if (OperatingSystem.current().isMacOsX()) {
			file("./migrate_db.sh").text =
			  '#! /bin/zsh\n' +
			  'java --class-path ' + sourceSets.main.runtimeClasspath.getAsPath() + ' de.svws_nrw.db.utils.app.MigrateDB "$@"\n'
			file("./create_db.sh").text =
			  '#! /bin/zsh\n' +
			  'java --class-path ' + sourceSets.main.runtimeClasspath.getAsPath() + ' de.svws_nrw.db.utils.app.CreateSchema "$@"\n'
			file("./lupo_import.sh").text =
			  '#! /bin/zsh\n' +
			  'java --class-path ' + sourceSets.main.runtimeClasspath.getAsPath() + ' de.svws_nrw.db.utils.lupo.app.ImportLupoMDB "$@"\n'
			file("./kurs42_import.sh").text =
			  '#! /bin/zsh\n' +
			  'java --class-path ' + sourceSets.main.runtimeClasspath.getAsPath() + ' de.svws_nrw.db.utils.app.ImportKurs42Blockung "$@"\n'
			file("./export.sh").text =
			  '#! /bin/zsh\n' +
			  'java --class-path ' + sourceSets.main.runtimeClasspath.getAsPath() + ' de.svws_nrw.db.utils.app.ExportDB "$@"\n'
			file("./import.sh").text =
			  '#! /bin/zsh\n' +
			  'java --class-path ' + sourceSets.main.runtimeClasspath.getAsPath() + ' de.svws_nrw.db.utils.app.ImportDB "$@"\n'
			project.exec {
				commandLine('chmod',  '+x', './migrate_db.sh')
				commandLine('chmod',  '+x', './create_db.sh')
				commandLine('chmod',  '+x', './lupo_import.sh')
				commandLine('chmod',  '+x', './kurs42_import.sh')
				commandLine('chmod',  '+x', './export.sh')
				commandLine('chmod',  '+x', './import.sh')
			}
		} else {
			// TODO
		}
	}
}


assemble.dependsOn createScripts
