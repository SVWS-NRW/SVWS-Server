import org.codehaus.groovy.runtime.GStringImpl

plugins {
	id 'svws.gradle.node.plugin'
}

// Führt alle Tasks von subproject-plugin.gradle in diesem Verzeichnis aus
apply from: ('../subproject-plugin.gradle')

// Erzeuge eine unique JobId welche in den Tasks, temporären Dateien und Container verwendet wird.
def jobId = UUID.randomUUID().toString().substring(0, 8)

/**
 * Npm install
 */
tasks.register('npmInstall', NpmTask) {
	description = 'Installiert die Npm Abhängigkeiten'
	args = ['install']
	doFirst {
		mkdir file("$projectDir/download/playwright")
	}
}


/**
 * Playwright Abhängigkeiten installieren
 */
tasks.register('playwrightInstallDeps', NpmRun) {
	description = 'Installiert die Playwright Abhängigkeiten'
	group = 'testing'
	dependsOn 'npmInstall'
	mustRunAfter 'npmInstall'
	mustRunAfter ':tests:tests-e2e-stablemode:playwrightInstallDepsStable'
	args = ['installdeps']
	environment PLAYWRIGHT_BROWSERS_PATH: "$projectDir/download/playwright/"
	doFirst {
		mkdir file("$projectDir/download/playwright")
	}
}


/**
 * Konfiguration für das Subpackage bzw. die Tests
 */
ext {
	SVWS_SERVERMODE = "dev"

	// Docker Konfiguration
	APP_CONTAINER_NAME = "app-e2e-tests-dev${generateContainerSuffix(jobId)}"
	DB_CONTAINER_NAME = "database-e2e-tests-dev${generateContainerSuffix(jobId)}"
	DB_SERVICE_NAME = "mariadb${generateContainerSuffix(jobId)}"
	APP_IMAGE_NAME = "svws-app${generateContainerSuffix(jobId)}"

	// Auch für Docker. Forwarded Ports, werden nur bei lokal genutzten Container verwendet
	FORWARDED_DB_PORT = 3322
	FORWARDED_APP_PORT = 5022

	// Liste der Datenbanken die für die Tests genutzt / geseedet werden sollen
	TARGET_TEST_DATA_BASES = ['GymAbi01']
}


/**
 * Starten der Integrationstests gegen die Docker Umgebung
 */
tasks.register('testAgainstDockerEnv', NpmRun) {
	description = 'Startet die Integrationstests gegen die Docker Umgebung'
	group = 'testing'
	dependsOn ':svws-webclient:core:assemble'
	dependsOn ':svws-webclient:client:assemble'
	dependsOn 'seedDatabase'
	dependsOn 'playwrightInstallDeps'

	doFirst {
		mkdir file("$projectDir/build/test-results")
	}

	// Falls Exceptions auftreten führen diese nicht zum Abbruch des Scripts
	ignoreExitValue = true

	// Die Ziel-url vom Container mit der Application
	if (System.getenv('CI_SERVER')) {
		environment VITE_targetHost: "https://$project.ext.APP_CONTAINER_NAME:8443"
	} else {
		environment VITE_targetHost: "https://localhost:$project.ext.FORWARDED_APP_PORT"
	}
	outputs.upToDateWhen { false }
	outputs.dir file("$projectDir/build/test-results")

	// npm Kommando
	args = ['test']
}


/**
 * Starten der Tests gegen die lokale Applikation. Hier wird kein Docker gestartet.
 */
tasks.register('no_auto_docker_test_E2E', NpmRun) {
	group = "verification"
	dependsOn ':tests:checkIfLokalApplikationIsRunning'
	dependsOn ':tests:checkIfLokalDataBaseIsRunning'
	inputs.dir file("$projectDir/tests")
	args = ['test:local']
}

/**
 * Erzeugt die Codegen Dateien. Kann genutzt werden um E2E Tests aufzuzeichnen
 */
tasks.register('recordE2ETest', NpmRun) {
	dependsOn 'playwrightInstallDeps'
	mkdir file("$projectDir/build/codegen")
	args = ['codegen']
}
