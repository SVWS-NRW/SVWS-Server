
import groovy.json.JsonSlurper
import org.codehaus.groovy.runtime.GStringImpl

// Initialisierung der Plugins
plugins {
	id 'svws.gradle.node.plugin'
}

def configDir = "${rootDir}/config/tests"

def configFile = file("$configDir/config.json")
if (!configFile.exists()) {
	configFile = file("$configDir/config_default.json")
}

def CONFIG = new JsonSlurper().parse(configFile)

def CLIENT_SECRET = "not set"

// Führt alle Tasks von subproject-plugin.gradle in diesem Verzeichnis aus
apply from: ('../subproject-plugin.gradle')
apply from: 'custom-tasks.gradle'

// Erzeuge eine unique JobId welche in den Tasks, temporären Dateien und Container verwendet wird.
def jobId = UUID.randomUUID().toString().substring(0, 8)

/**
 * Konfiguration für das Subpackage bzw. die Tests
 */
ext {
	SVWS_SERVERMODE = "dev"

	// Docker Konfiguration
	APP_CONTAINER_NAME = "app-vite-enm-tests${generateContainerSuffix(jobId)}"
	DB_CONTAINER_NAME = "database-vite-enm-tests${generateContainerSuffix(jobId)}"
	ENM_CONTAINER_NAME = "env-server${generateContainerSuffix(jobId)}"

	DB_SERVICE_NAME = "mariadb${generateContainerSuffix(jobId)}"
	APP_IMAGE_NAME = "svws-app${generateContainerSuffix(jobId)}"
	ENM_IMAGE_NAME = "svws-enm${generateContainerSuffix(jobId)}"

	// Auch für Docker. Forwarded Ports, werden nur bei lokal genutzten Container verwendet
	FORWARDED_DB_PORT = 3333
	FORWARDED_APP_PORT = 5050

	// Liste der Datenbanken die für die Tests genutzt / geseedet werden sollen
	TARGET_TEST_DATA_BASES = ['EnmA']
}

/**
 * Führt die Vitest Task setupTests mit entsprechenden Umgebungsvariablen aus
 */
tasks.register('runSetupTest', NpmRun) {
	description = "Führt die Vitest Task setupTests mit entsprechenden Umgebungsvariablen aus"
	outputs.dir file("$projectDir/build/test-results")
	outputs.upToDateWhen { false }
	environment NODE_TLS_REJECT_UNAUTHORIZED: 0

	// Falls Exceptions auftreten führen diese nicht zum Abbruch des Scripts
	ignoreExitValue = true

	def APP_CONTAINER_NAME = APP_CONTAINER_NAME
	def ENM_CONTAINER_NAME = ENM_CONTAINER_NAME
	def FORWARDED_APP_PORT = FORWARDED_APP_PORT

	// Die Ziel-url vom Container mit der Application
	environment VITE_ENM_FOR_SVWS_targetHost: "https://$ENM_CONTAINER_NAME"

	if (System.getenv('CI_SERVER')) {
		environment VITE_APP_targetHost: "https://$APP_CONTAINER_NAME:8443"
		environment VITE_ENM_targetHost: "https://$ENM_CONTAINER_NAME:443"

	} else {
		environment VITE_APP_targetHost: "https://localhost:$FORWARDED_APP_PORT"
		environment VITE_ENM_targetHost: "https://localhost"
	}
	args = ['test:setup']
}

/**
 * Liest das Client Secret aus dem laufenden ENM Server aus sodass dies für die Testfälle zur verfügung steht
 */
tasks.register('extractClientSecret', Exec) {
	description = "Liest das Client Secret aus dem laufenden ENM Server aus sodass dies für die Testfälle zur verfügung steht"
	mustRunAfter(runSetupTest)

	executable 'docker'
	def ENM_CONTAINER_NAME = project.ext.ENM_CONTAINER_NAME;
	doFirst {
		mkdir file("$projectDir/build/tempdocker/clientsecret")
		args 'cp', "${ENM_CONTAINER_NAME}:/var/www/html/db/client.sec", "build/tempdocker/clientsecret"
	}

	doLast {
		def captured = file("build/tempdocker/clientsecret/client.sec").text
		ext.fileContentVariable = captured
		CLIENT_SECRET = "${captured}"
	}
}


/**
 * Führt die Vitest Task SyncTests mit entsprechenden Umgebungsvariablen aus
 */
tasks.register('runSyncTest', NpmRun) {
	description = "Führt die Vitest Task SyncTests mit entsprechenden Umgebungsvariablen aus"
	mustRunAfter(extractClientSecret)

	outputs.dir file("$projectDir/build/test-results")
	outputs.upToDateWhen { false }
	environment NODE_TLS_REJECT_UNAUTHORIZED: 0

	// Falls Exceptions auftreten führen diese nicht zum Abbruch des Scripts
	ignoreExitValue = true

	def ENM_CONTAINER_NAME = project.ext.ENM_CONTAINER_NAME
	def APP_CONTAINER_NAME = project.ext.APP_CONTAINER_NAME
	def FORWARDED_APP_PORT = project.ext.FORWARDED_APP_PORT

	doFirst {
		// Die Ziel-url vom Container mit der Application
		environment VITE_ENM_FOR_SVWS_targetHost: "https://$ENM_CONTAINER_NAME"
		environment VITE_CLIENT_SECRET: "${CLIENT_SECRET}"
		if (System.getenv('CI_SERVER')) {
			environment VITE_APP_targetHost: "https://$APP_CONTAINER_NAME:8443"
			environment VITE_ENM_targetHost: "https://$ENM_CONTAINER_NAME:443"
		} else {
			environment VITE_APP_targetHost: "https://localhost:$FORWARDED_APP_PORT"
			environment VITE_ENM_targetHost: "https://localhost"
		}
		args = ['test:sync']
	}
}

/**
 * Führt die Vitest Task afterSetup mit entsprechenden Umgebungsvariablen aus
 */
tasks.register('runTestsAfterSetup', NpmRun) {
	description = "Führt die Vitest Task afterSetup mit entsprechenden Umgebungsvariablen aus"
	mustRunAfter("runSyncTest")
	outputs.dir file("$projectDir/build/test-results")
	outputs.upToDateWhen { false }
	environment NODE_TLS_REJECT_UNAUTHORIZED: 0

	// Falls Exceptions auftreten führen diese nicht zum Abbruch des Scripts
	ignoreExitValue = true

	def ENM_CONTAINER_NAME = project.ext.ENM_CONTAINER_NAME
	def APP_CONTAINER_NAME = project.ext.APP_CONTAINER_NAME
	def FORWARDED_APP_PORT = project.ext.FORWARDED_APP_PORT

	// Die Ziel-url vom Container mit der Application
	if (System.getenv('CI_SERVER')) {
		environment VITE_APP_targetHost: "https://$APP_CONTAINER_NAME:8443"
		environment VITE_ENM_targetHost: "https://$ENM_CONTAINER_NAME:443"

	} else {
		environment VITE_APP_targetHost: "https://localhost:$FORWARDED_APP_PORT"
		environment VITE_ENM_targetHost: "https://localhost"
	}
	args = ['test:afterSetup']
}

/**
 * Starten der Integrationstests gegen die Docker Umgebung
 */
tasks.register('testAgainstDockerEnv') {
	description = 'Startet die Integrationstests gegen die Docker Umgebung'
	group = 'verification'
	dependsOn ':svws-webclient:core:assemble'
	dependsOn 'seedDatabase'

	// Stelle sicher das zwischen diesem Task und SeedDatabase noch die Custom Tasks von ENM laufen
	dependsOn 'starteDockerContainerMitTestUmgebungENM'
	mustRunAfter(starteDockerContainerMitTestUmgebungENM)

	starteDockerContainerMitTestUmgebungENM.mustRunAfter 'seedDatabase'

	doFirst {
		mkdir file("$projectDir/build/test-results")
	}

	finalizedBy("runSetupTest")
	finalizedBy("extractClientSecret")
	finalizedBy("runSyncTest")
	finalizedBy("runTestsAfterSetup")

	if(!CONFIG.keepContainerAfterTestRun) {
		finalizedBy("removeENMBuildArtifacts") // räume die Testumgebung ab
	}
}

/**
 * Beim Testen werden die Dateien (DB / Clientsecret) verändert. Da diese durch Docker mounted werden müssen diese nach
 * dem Testdurchlauf abgeräumt werden
 */
tasks.register('removeENMBuildArtifacts', Delete) {
	mustRunAfter("runSetupTest")
	mustRunAfter("runTestsAfterSetup")
	mustRunAfter("extractClientSecret")
	mustRunAfter("runSyncTest")
	delete './build/tempdocker/enm'
	delete './build/tempdocker/clientsecret'
}
