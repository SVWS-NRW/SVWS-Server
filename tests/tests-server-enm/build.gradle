import groovy.json.JsonSlurper

// Initialisierung der Plugins
plugins {
	id 'svws.gradle.node.plugin'
}

def testConfigPath = "${rootDir}/config/tests/config.json" as String
def CONFIG = new JsonSlurper().parse(new File(testConfigPath))

// Führt alle Tasks von subproject-plugin.gradle in diesem Verzeichnis aus
apply from: ('../subproject-plugin.gradle')
apply from: 'custom-tasks.gradle'

// Erzeuge eine unique JobId welche in den Tasks, temporären Dateien und Container verwendet wird.
def jobId = UUID.randomUUID().toString().substring(0, 6)

/**
 * Konfiguration für das Subpackage bzw. die Tests
 */
ext {
	SVWS_SERVERMODE = "dev"

	// Docker Konfiguration
	APP_CONTAINER_NAME = "app-vite-enm-tests--$jobId"
	DB_CONTAINER_NAME = "database-vite-enm-tests--$jobId"
	ENM_CONTAINER_NAME = "env-server--$jobId"

	DB_SERVICE_NAME = "mariadb--$jobId"
	APP_IMAGE_NAME = "svws-app--$jobId"
	ENM_IMAGE_NAME = "svws-enm--$jobId"

	// Auch für Docker. Forwarded Ports, werden nur bei lokal genutzten Container verwendet
	FORWARDED_DB_PORT = 3333
	FORWARDED_APP_PORT = 5050

	// Liste der Datenbanken die für die Tests genutzt / geseedet werden sollen
	TARGET_TEST_DATA_BASES = ['EnmA']
}

/**
 * Führt die Vitest Task setupTests mit entsprechenden Umgebungsvariablen aus
 */
task runSetupTest(type: NpmRun) {
	description = "Führt die Vitest Task setupTests mit entsprechenden Umgebungsvariablen aus"
	outputs.dir file("$projectDir/build/test-results")
	outputs.upToDateWhen { false }
	environment NODE_TLS_REJECT_UNAUTHORIZED: 0

	// Falls Exceptions auftreten führen diese nicht zum Abbruch des Scripts
	ignoreExitValue = true

	// Die Ziel-url vom Container mit der Application
	environment VITE_ENM_FOR_SVWS_targetHost: "https://$project.ext.ENM_CONTAINER_NAME"

	if (System.getenv('CI_SERVER')) {
		environment VITE_APP_targetHost: "https://$project.ext.APP_CONTAINER_NAME:8443"
		environment VITE_ENM_targetHost: "https://$project.ext.ENM_CONTAINER_NAME:443"

	} else {
		environment VITE_APP_targetHost: "https://localhost:$project.ext.FORWARDED_APP_PORT"
		environment VITE_ENM_targetHost: "https://localhost"
	}
	args = ['test:setup']
}

/**
 * Liest das Client Secret aus dem laufenden ENM Server aus sodass dies für die Testfälle zur verfügung steht
 */
task extractClientSecret() {
	description = "Liest das Client Secret aus dem laufenden ENM Server aus sodass dies für die Testfälle zur verfügung steht"
	mustRunAfter(runSetupTest)
	doLast {
		def output = new ByteArrayOutputStream()

		exec {
			executable 'docker'
			args 'exec', "$project.ext.ENM_CONTAINER_NAME", "cat", "/var/www/html/db/client.sec"
			standardOutput = output
		}
		def fileContent = output.toString().trim()
		ext.fileContentVariable = fileContent

		project.ext.CLIENTKEY = "${fileContent}"
	}
}

/**
 * Führt die Vitest Task SyncTests mit entsprechenden Umgebungsvariablen aus
 */
task runSyncTest(type: NpmRun) {
	description = "Führt die Vitest Task SyncTests mit entsprechenden Umgebungsvariablen aus"
	mustRunAfter(extractClientSecret)

	outputs.dir file("$projectDir/build/test-results")
	outputs.upToDateWhen { false }
	environment NODE_TLS_REJECT_UNAUTHORIZED: 0

	// Falls Exceptions auftreten führen diese nicht zum Abbruch des Scripts
	ignoreExitValue = true

	doFirst {
		// Die Ziel-url vom Container mit der Application
		environment VITE_ENM_FOR_SVWS_targetHost: "https://$project.ext.ENM_CONTAINER_NAME"
		environment VITE_CLIENT_SECRET: "${project.ext.CLIENTKEY}"

		if (System.getenv('CI_SERVER')) {
			environment VITE_APP_targetHost: "https://$project.ext.APP_CONTAINER_NAME:8443"
			environment VITE_ENM_targetHost: "https://$project.ext.ENM_CONTAINER_NAME:443"

		} else {
			environment VITE_APP_targetHost: "https://localhost:$project.ext.FORWARDED_APP_PORT"
			environment VITE_ENM_targetHost: "https://localhost"
		}
		args = ['test:sync']
	}
}

/**
 * Führt die Vitest Task afterSetup mit entsprechenden Umgebungsvariablen aus
 */
task runTestsAfterSetup(type: NpmRun) {
	description = "Führt die Vitest Task afterSetup mit entsprechenden Umgebungsvariablen aus"
	mustRunAfter("runSyncTest")
	outputs.dir file("$projectDir/build/test-results")
	outputs.upToDateWhen { false }
	environment NODE_TLS_REJECT_UNAUTHORIZED: 0

	// Falls Exceptions auftreten führen diese nicht zum Abbruch des Scripts
	ignoreExitValue = true

	// Die Ziel-url vom Container mit der Application
	if (System.getenv('CI_SERVER')) {
		environment VITE_APP_targetHost: "https://$project.ext.APP_CONTAINER_NAME:8443"
		environment VITE_ENM_targetHost: "https://$project.ext.ENM_CONTAINER_NAME:443"

	} else {
		environment VITE_APP_targetHost: "https://localhost:$project.ext.FORWARDED_APP_PORT"
		environment VITE_ENM_targetHost: "https://localhost"
	}
	args = ['test:afterSetup']
}

/**
 * Starten der Integrationstests gegen die Docker Umgebung
 */
task testAgainstDockerEnv() {
	description = 'Startet die Integrationstests gegen die Docker Umgebung'
	group 'verification'
	dependsOn ':svws-webclient:core:assemble'
	dependsOn 'seedDatabase'

	// Stelle sicher das zwischen diesem Task und SeedDatabase noch die Custom Tasks von ENM laufen
	dependsOn 'starteDockerContainerMitTestUmgebungENM'
	mustRunAfter(starteDockerContainerMitTestUmgebungENM)

	starteDockerContainerMitTestUmgebungENM.mustRunAfter 'seedDatabase'

	doFirst {
		mkdir file("$projectDir/build/test-results")

	}

	finalizedBy("runSetupTest")
	finalizedBy("extractClientSecret")
	finalizedBy("runSyncTest")
	finalizedBy("runTestsAfterSetup")

	if(!CONFIG.keep_container_after_test_run) {
		finalizedBy("removeENMBuildArtifacts") // räume die Testumgebung ab
	}
}

/**
 * Beim Testen werden die Dateien (DB / Clientsecret) verändert. Da diese durch Docker mounted werden müssen diese nach
 * dem Testdurchlauf abgeräumt werden
 */
task removeENMBuildArtifacts(type: Delete) {
	mustRunAfter("runSetupTest")
	mustRunAfter("runTestsAfterSetup")
	mustRunAfter("extractClientSecret")
	mustRunAfter("runSyncTest")
	delete './build/tempdocker/enm'
}
