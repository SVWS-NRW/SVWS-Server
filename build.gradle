import org.gradle.internal.os.OperatingSystem

plugins {
	// TODO Support JPMS-Modules
    // id "de.jjohannes.extra-java-module-info" version "0.9" apply false
	id 'com.github.jk1.dependency-license-report' version '2.1'
	id 'org.sonarqube' version '4.3.0.3225'
	id "io.github.gradle-nexus.publish-plugin" version "1.3.0"
	id 'svws.gradle.node.plugin'
}

def config = new groovy.json.JsonSlurper().parseText(file("buildconfig.json").text)
println "Version " + config.project.version
def gitHASH = null;
if (file(".git/HEAD").exists()) {
	def gitHEADFileString = file(".git/HEAD").text
	if (gitHEADFileString.trim().length() == 40) {
		gitHASH = gitHEADFileString.trim()
	} else {
		def gitHEADRefParts = gitHEADFileString.split(":");
		if ((gitHEADRefParts.length == 2) && (gitHEADRefParts[0].trim().equals("ref")) && (file(".git/" + gitHEADRefParts[1].trim()).exists())) {
			def gitHEADHASHFileString = file(".git/" + gitHEADRefParts[1].trim()).text
			if (gitHEADHASHFileString.trim().length() == 40)
				gitHASH = gitHEADHASHFileString.trim()
		}
	}
}
println "Git-Hash: " + gitHASH

String osName = OperatingSystem.current().getName();
String osVersion = OperatingSystem.current().getVersion();
String os = OperatingSystem.current().isMacOsX();
println "*** OS-Version: $osName $osVersion was detected. (MacOS: $os)"
println "*** Gradle Version: $gradle.gradleVersion"

int cores = Runtime.getRuntime().availableProcessors();
println "*** Number of CPU-Cores: $cores"

double memFree = Runtime.getRuntime().freeMemory() / 1000000.0;
double memUsed = Runtime.getRuntime().totalMemory() / 1000000.0;
double memMax = Runtime.getRuntime().maxMemory() / 1000000.0;
println "*** Memory (free): %.0fM".formatted(memFree)
println "*** Memory (used): %.0fM".formatted(memUsed)
println "*** Memory (max): %.0fM".formatted(memMax)

wrapper {
    description "Regenerates the Gradle Wrapper files"
    gradleVersion = '8.3'
    distributionUrl = "https://services.gradle.org/distributions/gradle-${gradleVersion}-all.zip"
}

allprojects {
    apply plugin: 'svws.gradle.javalib.plugin'
	apply plugin: 'svws.gradle.svwsmavenrepo.plugin'
	apply plugin: 'svws.gradle.svwseclipse.plugin'
	apply plugin: 'org.sonarqube'
	apply plugin: 'checkstyle'
	// TODO Support JPMS-Modules
	// apply plugin: 'de.jjohannes.extra-java-module-info'

	version = config.project.version
	project.ext.latestRelease = config.project.version
	group = 'de.svws-nrw'

	svwsmavenrepo {
		//nexusMavenCentralProxyRepositoryUrl = 'https://artifactory.svws-nrw.de/repository/maven-central'
		githubMavenPackagesUrl = 'https://maven.pkg.github.com/SVWS-NRW/SVWS-Server'
	}

	java {
	    withJavadocJar()
	    withSourcesJar()
	}

	javadoc {
		options.encoding = 'UTF-8'
		options.charSet = 'UTF-8'
		options.docEncoding = 'UTF-8'
	    options.addStringOption('Xmaxerrs', '10000')
	    options.addStringOption('Xmaxwarns', '10000')
	    if (JavaVersion.current().isJava9Compatible()) {
	        options.addBooleanOption('html5', true)
	    	options.addStringOption('Xdoclint:none', '-quiet')
	    }
	}

	sonarqube {
		properties {
			property "sonar.sourceEncoding", "UTF-8"
		}
	}

	// create javadoc task for test code
	task testJavadoc(type: Javadoc) {
		group = 'documentation'
		options.encoding = 'UTF-8'
		options.charSet = 'UTF-8'
		options.docEncoding = 'UTF-8'
	    options.addStringOption('Xmaxerrs', '10000')
	    options.addStringOption('Xmaxwarns', '10000')
		if (JavaVersion.current().isJava9Compatible()) {
			options.addBooleanOption('html5', true)
	    	options.addStringOption('Xdoclint:none', '-quiet')
		}
		source = sourceSets.test.allJava
		classpath = sourceSets.test.compileClasspath
		destinationDir = file("${buildDir}/docs/testjavadoc")
	}

	javadoc.dependsOn testJavadoc
/*
	eclipse {
		project {
			natures 'net.sf.eclipsecs.core.CheckstyleNature'
			buildCommand 'net.sf.eclipsecs.core.CheckstyleBuilder'
		}
	}
*/
/* TODO Support JPMS-Modules
	plugins.withType(JavaPlugin).configureEach {
        java {
            modularity.inferModulePath = true
        }
    }
*/

	test {
	    useJUnitPlatform()
	}

	configurations {
		extendedDefault {
			extendsFrom configurations.default
			canBeResolved = true
		} 
	}

	task printDependencies {
		group = 'build'
		doLast {
			println "Dependencies:"
			configurations.extendedDefault.each { println it }
		}
	}

}

subprojects {
	// Publishing-Plugin für alle Module aktivieren (mit Ausnahme des Moduls 'gradle-build-src')
	if (it.name != 'gradle-build-src') {
		apply plugin: 'svws.gradle.svwsmavenpublish.plugin'

		svwsmavenpublish {
			nexusSnapshotRepositoryUrl = 'https://artifactory.svws-nrw.de/repository/svws-maven-snapshots'
			nexusReleasesRepositoryUrl = 'https://artifactory.svws-nrw.de/repository/svws-maven-releases'
			githubReleasesRepositoryUrl =  'https://maven.pkg.github.com/SVWS-NRW/SVWS-Server'
		}
	}
}

println "Prüfe die Projekt-Version und passe diese ggf. an:"
fileTree(dir: './', include: '**/package.json', exclude: '**/node_modules/**').files.findAll {
	def f = new File("" + it)
	def text = f.text
	def updated = text.replaceAll('"version": "[^"]*"', '"version": "' + config.project.version + '"');
	if (text.equals(updated)) {
		println "  " + it + " UP-TO-DATE"
	} else {
		println "  " + it + " aktualisiere auf Version " + config.project.version
		f.withWriter { w -> w << updated }
	}
}
def fileVersionTS = new File("${rootDir}/svws-webclient/client/version.ts")
fileVersionTS.withWriter { w -> w << 'export const version = "' + config.project.version + '"' }
def fileVersionTSAdminClient = new File("${rootDir}/svws-webclient/admin/version.ts")
fileVersionTSAdminClient.withWriter { w -> w << 'export const version = "' + config.project.version + '"' }
def fileVersionTSLaufbahnplanung = new File("${rootDir}/svws-webclient/laufbahnplanung/version.ts")
fileVersionTSLaufbahnplanung.withWriter { w -> w << 'export const version = "' + config.project.version + '"' }

def tsGitHashStr = (gitHASH == null) ? 'null' : '"' + gitHASH + '"'
def fileGithashTS = new File("${rootDir}/svws-webclient/client/githash.ts")
fileGithashTS.withWriter { w -> w << 'export const githash = ' + tsGitHashStr }
def fileGithashTSAdminClient = new File("${rootDir}/svws-webclient/admin/githash.ts")
fileGithashTSAdminClient.withWriter { w -> w << 'export const githash = ' + tsGitHashStr }
def fileGithashTSLaufbahnplanung = new File("${rootDir}/svws-webclient/laufbahnplanung/githash.ts")
fileGithashTSLaufbahnplanung.withWriter { w -> w << 'export const githash = ' + tsGitHashStr }


task npmPrepare(type: NpmInstall) {
	group "build"
    inputs.files fileTree(dir: './', include: 'package.json')
    doNotTrackState("")
}


task rebuild(type: GradleBuild) {
	tasks = ['clean', 'build']
	group "build"
}


task wipe() {
	dependsOn nodeWipe
	group "build"
}


task assembleServer() {
	dependsOn(':svws-server-app:assemble')
	group "build"
}

task buildServer() {
	dependsOn(':svws-server-app:build')
	group "build"
}


task assembleTS() {
	dependsOn(':svws-webclient:client:assemble')
	group "build"
}

task buildTS() {
	dependsOn(':svws-webclient:client:build')
	group "build"
}

task publishReleaseAllAndCloseSonatype(type: GradleBuild) {
	tasks = ['publishAllPublicationsToSonatypeRepository', 'closeAndReleaseSonatypeStagingRepository', 'publishReleaseAll']
	group "publishing"
	description 'Publish ins Sonatype Staging, im Anschluss Release nach Maven Central und Schließen des Staging. Danach Release zu anderen Repositories'
}




import com.github.jk1.license.render.*
import com.github.jk1.license.importer.*

licenseReport {
    // Set output directory for the report data.
    // Defaults to ${project.buildDir}/reports/dependency-license.
    outputDir = "$projectDir/build/licenses"

    // Select projects to examine for dependencies.
    // Defaults to current project and all its subprojects
    projects = [project] + project.subprojects

    // Adjust the configurations to fetch dependencies, e.g. for Android projects. Default is 'runtimeClasspath'
    // configurations = ['implementation']
    // Use 'ALL' to dynamically resolve all configurations:
//    configurations = ALL
    configurations = ['runtimeClasspath']


    // List the groups ids to exclude from dependency report. Supports regular expressions.
    // For finer granularity, see: excludes.
    excludeGroups = ['de.svws_nrw.server']

    // List the ids (in module:name format) to exclude from dependency report. Supports regular expressions.
    // By default excludes is empty.
    excludes = ['moduleGroup:moduleName']

    // Don't include artifacts of project's own group into the report
    excludeOwnGroup = true

    // Set custom report renderer, implementing ReportRenderer.
    // Yes, you can write your own to support any format necessary.
    renderers = [new XmlReportRenderer('third-party-libs.xml', 'Back-End Libraries')]

    // Set importers to import any external dependency information, i.e. from npm.
    // Custom importer should implement DependencyDataImporter interface.
    // importers = [new XmlReportImporter('Frontend dependencies', file(frontend_libs.xml))]

    // This is for the allowed-licenses-file in checkLicense Task
    allowedLicensesFile = new File("$projectDir/allowed-licenses.json")
}
nexusPublishing {
    repositories {
        sonatype {
            nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
            username =  getOssrhActor()
            password = getOssrhToken()
        }
    }
}

task allJavadoc(type: Javadoc) {
    project.subprojects.each {
        if (it.plugins.hasPlugin('java')) {
            source += it.java.sourceSets.main.allJava
            classpath += files(it.java.sourceSets.main.compileClasspath)
        }
    }
    destinationDir = file("${buildDir}/docs/javadoc-all")
}
