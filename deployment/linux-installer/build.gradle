def linuxfileAppDir = "$projectDir/svws/app"

task clearAppFolder(type: Delete) {
	//dependsOn downloadPublishedArtifacts
	file("${linuxfileAppDir}").deleteDir()
}

/*
 Task lädt die SVWS-Artefakte einer angegebenen Version
 aus dem Package-Repository von GitHub und speichert diese
 für die Integration in der tar.gz des SVWSs.
 */
task copyPublishedArtifacts(type: Copy) {
	dependsOn clearAppFolder
	mustRunAfter(':svws-webclient:doZip')
	into ("${linuxfileAppDir}/lib") {
		from (configurations.runtimeClasspath) {
			exclude "svws-*.jar"
		}
	}
	into ("${linuxfileAppDir}") {
		from (configurations.runtimeClasspath) {
			include "svws-*.jar"
		}
		from "../svws-webclient/build/SVWS-Client.zip"
	}

}


/*
 Verpackt die SVWS-Artefakte als tar.gz
 */
task linuxZipBuild(type: Tar, dependsOn: copyPublishedArtifacts) {
	archiveBaseName = "linux-installer"
	archiveVersion = project.ext.svwsArtifactVersion
	archiveExtension = "tar.gz"
	compression = Compression.GZIP
	from ("$projectDir/svws"){
		into "svws"
	}
	from ("$projectDir/init-scripts"){
		into "init-scripts"
	}
}


task replacePlaceholder(type: Copy, dependsOn: linuxZipBuild) {
	from "$projectDir/install.sh"

	def placeholder_name = 'LINUX_INSTALLER_FILE_NAME'
	def filename = "linux-installer-"+project.ext.svwsArtifactVersion+".tar.gz"
	filter { String line -> line.replaceAll(placeholder_name, filename) }

	def placeholder_dl = 'BASE_DOWNLOAD_URL'
	def baseUrl = "https://www.svws.nrw.de/uploads/media/linux/"+project.ext.svwsArtifactVersion
	filter { String line -> line.replaceAll(placeholder_dl, baseUrl) }

	into "$buildDir/distributions"
}

task removeCR {
	dependsOn('replacePlaceholder')
	def inputFile = file("$buildDir/distributions/install.sh")
	doLast {
		ant.replace(file: inputFile) {
			replacefilter(token: '\r', value: '')
		}
	}
}

task buildLinuxInstaller() {
	dependsOn('removeCR')
	group "build"
}

clean.doLast {
	file("${linuxfileAppDir}").deleteDir()
}
