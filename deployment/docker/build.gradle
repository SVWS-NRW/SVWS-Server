def dockerfileAppDir = "$projectDir/svws/app"

dependencies {
	implementation project(':svws-server-app')
}

/*
 Task lädt die SVWS-Artefakte einer angegebenen Version
 aus dem Package-Repository von GitHub und speichert diese
 für die Integration in das Docker-Image des SVWSs.
*/

task copyArtifacts(type: Copy) {
	description = 'Kopieren der aktuellen Artefakte'
	// wenn doZip im build ausgeführt wird, muss dieser Task darauf warten
	mustRunAfter(':svws-webclient:client:doZip')
	into dockerfileAppDir
	into ("lib/") {
		from (configurations.runtimeClasspath) {
			exclude "svws-*.jar"
		}
	}
	into ("/") {
		from (configurations.runtimeClasspath) {
			include "svws-*.jar"
		}
		from "../../svws-webclient/client/build/SVWS-Client.zip"
	}
}

/*
 Task führt ein Docker-Build per docker durch.
 */
task dockerBuildTag(type: Exec) {
	dependsOn copyArtifacts
	workingDir "$projectDir/svws"
	if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
		commandLine 'cmd', '/c', 'docker build . -t svwsnrw/svws-server:'+project.ext.svwsArtifactVersion
	} else {
		commandLine 'sh', '-c', 'docker build . -t svwsnrw/svws-server:'+project.ext.svwsArtifactVersion
	}
}

/*
 Task führt ein Docker-Build per docker durch.
 */
task dockerBuildLatestTag(type: Exec) {
	dependsOn dockerBuildTag
	workingDir "$projectDir/svws"
	if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
		commandLine 'cmd', '/c', 'docker build . -t svwsnrw/svws-server:latest'
	} else {
		commandLine 'sh', '-c', 'docker build . -t svwsnrw/svws-server:latest'
	}
}

/*
 Task führt ein Docker-Push zu dockerhub durch.
 */
task dockerPushDockerhub(type: Exec) {
	dependsOn dockerBuildLatestTag
	workingDir "$projectDir/svws"
	if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
		commandLine 'cmd', '/c', 'docker login'
		commandLine 'cmd', '/c', 'docker push svwsnrw/svws-server:'+project.ext.svwsArtifactVersion
	} else {
		commandLine 'sh', '-c', 'docker login'
		commandLine 'sh', '-c', 'docker push svwsnrw/svws-server:'+project.ext.svwsArtifactVersion
	}
}

/*
 Task führt ein Docker-Push zu dockerhub durch.
 */
task dockerPushLatestDockerhub(type: Exec) {
	dependsOn dockerPushDockerhub
	workingDir "$projectDir/svws"
	if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
		commandLine 'cmd', '/c', 'docker login'
		commandLine 'cmd', '/c', 'docker push svwsnrw/svws-server:latest'
	} else {
		commandLine 'sh', '-c', 'docker login'
		commandLine 'sh', '-c', 'docker push svwsnrw/svws-server:latest'
	}
}

/*
 Task führt ein Docker-Push zu dockerhub durch.
 */
task dockerRunnerPushLatestDockerhub(type: Exec) {
	workingDir "$projectDir/dockerrunner"
	if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
		commandLine 'cmd', '/c', 'docker login'
		commandLine 'cmd', '/c', 'docker builder prune -a'
		commandLine 'cmd', '/c', 'docker build . -t svwsnrw/dockerrunner:latest'
		commandLine 'cmd', '/c', 'docker push svwsnrw/dockerrunner:latest'
	} else {
		commandLine 'sh', '-c', 'docker login'
		commandLine 'sh', '-c', 'docker builder prune -a'
		commandLine 'sh', '-c', 'docker build . -t svwsnrw/dockerrunner:latest'
		commandLine 'sh', '-c', 'docker push svwsnrw/dockerrunner:latest'
	}
}



task dockerPushAllDockerhub() {
	dependsOn('dockerPushLatestDockerhub')
	group "Publishing"
}



/*
 Task führt ein Docker-Build per docker compose durch.

task dockerComposeBuild(type: Exec) {
	dependsOn copyArtifacts
	workingDir "$projectDir"
	if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
		commandLine 'cmd', '/c', 'docker compose build'
	} else {
		commandLine 'sh', '-c', 'docker compose build'
	}
}

/*
 Task startet eine lokale SVWS-Umgebung per docker compose.

task dockerComposeUp(type: Exec) {
	workingDir "$projectDir"
	def cmd = 'docker compose up'
	if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
		commandLine 'cmd', '/c', cmd
	} else {
		commandLine 'sh', '-c', 'docker compose up'
	}
}

/*
 Task führt einen Image-Build des SVWS durch.

task dockerBuildSvws(type: Exec) {
	dependsOn copyArtifacts
	workingDir "$projectDir"
	def cmd = "docker build svws/. -t svws:${svwsArtifactVersion}"
	if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
		commandLine 'cmd', '/c', cmd
	} else {
		commandLine 'sh', '-c', cmd
	}
}

/*
 Task führt einen Image-Build des SVWS durch, setzt ein Tag
 und veröffentlicht das Image im Image-Repository (Nexus)

task dockerBuildTagAndPublish(type: Exec) {
	dependsOn dockerBuildSvws
	workingDir "$projectDir"
	def dockerRegistryUsername = getNexusActor()
	def dockerRegistryToken = getNexusToken()

	def dockerRegistryHost = 'artifactory.svws-nrw.de'
	def dockerRegistry = "${dockerRegistryHost}/repository/svws-docker"
	def tagNamePub = "${dockerRegistry}/svws:${svwsArtifactVersion}"
	def dockerTagCmd = "docker tag svws:${svwsArtifactVersion} ${tagNamePub}"
	def dockerPushCmd = "docker push ${tagNamePub}"

	if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
		def dockerLoginCmdWin = "docker login --username ${dockerRegistryUsername} --password-stdin ${dockerRegistryHost}<pw.txt"
		commandLine 'cmd', '/c', "@echo ${dockerRegistryToken}>pw.txt&&${dockerLoginCmdWin} && ${dockerTagCmd} && ${dockerPushCmd} && del pw.txt"
	} else {
		def dockerLoginCmdLin = "set -x; echo \"${dockerRegistryToken}\" | docker login --username ${dockerRegistryUsername} --password-stdin ${dockerRegistryHost}"
		commandLine 'sh', '-c', "${dockerLoginCmdLin} && ${dockerTagCmd} && ${dockerPushCmd}"
	}
}

*/

clean.doLast {
	file("${dockerfileAppDir}").deleteDir()
}
