dependencies {
	implementation project(':svws-server-app')
}


/* Dieser Task wird von der Pipeline aufgerufen, um alle svws-Docker-Images auf Dockerhub beim Release zu veröffentlichen. */
task dockerPushAllDockerhub() {
	dependsOn('dockerPushLatestDockerhub')
	group = "Publishing"
}


/* Vorbereitung der Dateien im build-Ordner, um das SVWS-Docker-Image zu bauen. */
task copyDockerClientArtifacts(type: Copy) {
	description = 'Kopieren der aktuellen Artefakte'
	group = "docker"
	doFirst {
		mkdir "$projectDir/build/svws/app/lib"
	}
	dependsOn (':svws-webclient:client:doZip')
	dependsOn (':svws-webclient:admin:doZip')
	// wenn doZip im build ausgeführt wird, muss dieser Task darauf warten
	mustRunAfter(':svws-webclient:client:doZip')
	mustRunAfter(':svws-webclient:admin:doZip')

	into "$projectDir/build/svws"
	into ("app/lib/") {
		from (configurations.runtimeClasspath) {
			exclude "svws-*.jar"
		}
	}
	into ("app/") {
		from (configurations.runtimeClasspath) {
			include "svws-*.jar"
		}
		from "../../svws-webclient/client/build/SVWS-Client.zip", "../../svws-webclient/admin/build/SVWS-Admin-Client.zip"
	}
	into ("/") {
		from "$projectDir/svws/Dockerfile", "$projectDir/svws/startup.sh", "$projectDir/svws/svwsconfig-template.json", "$projectDir/svws/svwsconfig-template-nodb.json"
	}
}


/* Baut das svws-Docker-Image lokal mit der entsprechenden Version als Tag. */
task dockerBuildTag(type: Exec) {
	group = "docker"
	dependsOn copyDockerClientArtifacts
	workingDir "$projectDir/build/svws"
	if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
		commandLine 'cmd', '/c', 'docker build . -t svwsnrw/svws-server:'+project.ext.svwsArtifactVersion
	} else {
		commandLine 'sh', '-c', 'docker build . -t svwsnrw/svws-server:'+project.ext.svwsArtifactVersion
	}
}

/* Baut das svws-Docker-Image lokal mit dem latest Tag. */
task dockerBuildLatestTag(type: Exec) {
	group = "docker"
	dependsOn dockerBuildTag
	workingDir "$projectDir/build/svws"
	if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
		commandLine 'cmd', '/c', 'docker build . -t svwsnrw/svws-server:latest'
	} else {
		commandLine 'sh', '-c', 'docker build . -t svwsnrw/svws-server:latest'
	}
}


/* Führt ein Docker-Push mit dem SVWS-Server-Image mit dem versionierten Tag zu dockerhub durch. */
task dockerPushDockerhub(type: Exec) {
	group = "docker"
	dependsOn dockerBuildLatestTag
	workingDir "$projectDir/build/svws"
	if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
		commandLine 'cmd', '/c', 'docker login'
		commandLine 'cmd', '/c', 'docker push svwsnrw/svws-server:'+project.ext.svwsArtifactVersion
	} else {
		commandLine 'sh', '-c', 'docker login'
		commandLine 'sh', '-c', 'docker push svwsnrw/svws-server:'+project.ext.svwsArtifactVersion
	}
}

/* Führt ein Docker-Push mit dem SVWS-Server-Image mit dem latest Tag zu dockerhub durch. */
task dockerPushLatestDockerhub(type: Exec) {
	group = "docker"
	dependsOn dockerPushDockerhub
	workingDir "$projectDir/build/svws"
	if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
		commandLine 'cmd', '/c', 'docker login'
		commandLine 'cmd', '/c', 'docker push svwsnrw/svws-server:latest'
	} else {
		commandLine 'sh', '-c', 'docker login'
		commandLine 'sh', '-c', 'docker push svwsnrw/svws-server:latest'
	}
}


/* Task führt ein Docker-Runner-17-Build per docker durch. */
task dockerRunner17BuildTag(type: Exec) {
	group = "docker"
	workingDir "$projectDir/dockerrunner/17"
	if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
		commandLine 'cmd', '/c', 'docker build . -t svwsnrw/dockerrunner:17'
	} else {
		commandLine 'sh', '-c', 'docker build . -t svwsnrw/dockerrunner:17'
	}
}

/* Task führt ein Docker-Runner-17 push auf dockerhub durch */
task dockerRunner17Push(type: Exec) {
	group = "docker"
	dependsOn dockerRunner17BuildTag
	workingDir "$projectDir/dockerrunner/17"
	if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
		commandLine 'cmd', '/c', 'docker login'
		commandLine 'cmd', '/c', 'docker push svwsnrw/dockerrunner:17'
	} else {
		commandLine 'sh', '-c', 'docker login'
		commandLine 'sh', '-c', 'docker push svwsnrw/dockerrunner:17'
	}
}


/* Task führt ein Docker-Runner-21-Build per docker durch. */
task dockerRunner21BuildTag(type: Exec) {
	group = "docker"
	workingDir "$projectDir/dockerrunner/21"
	if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
		commandLine 'cmd', '/c', 'docker build . -t svwsnrw/dockerrunner:21'
	} else {
		commandLine 'sh', '-c', 'docker build . -t svwsnrw/dockerrunner:21'
	}
}

/* Task führt ein Docker-Runner-21 push auf dockerhub durch */
task dockerRunner21Push(type: Exec) {
	group = "docker"
	dependsOn dockerRunner21BuildTag
	workingDir "$projectDir/dockerrunner/21"
	if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
		commandLine 'cmd', '/c', 'docker login'
		commandLine 'cmd', '/c', 'docker push svwsnrw/dockerrunner:21'
	} else {
		commandLine 'sh', '-c', 'docker login'
		commandLine 'sh', '-c', 'docker push svwsnrw/dockerrunner:21'
	}
}


/* Deprecated: Ein publish auf dem Nexus wurde durch den auf Harbor ersetzt.
 Diese Task muss noch angepasst werden.
 
 Task führt einen Image-Build des SVWS durch, setzt ein Tag
 und veröffentlicht das Image im Image-Repository (Nexus)

task dockerBuildTagAndPublish(type: Exec) {
	dependsOn dockerBuildSvws
	workingDir "$projectDir"
	def dockerRegistryUsername = getNexusActor()
	def dockerRegistryToken = getNexusToken()

	def dockerRegistryHost = 'artifactory.svws-nrw.de'
	def dockerRegistry = "${dockerRegistryHost}/repository/svws-docker"
	def tagNamePub = "${dockerRegistry}/svws:${svwsArtifactVersion}"
	def dockerTagCmd = "docker tag svws:${svwsArtifactVersion} ${tagNamePub}"
	def dockerPushCmd = "docker push ${tagNamePub}"

	if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
		def dockerLoginCmdWin = "docker login --username ${dockerRegistryUsername} --password-stdin ${dockerRegistryHost}<pw.txt"
		commandLine 'cmd', '/c', "@echo ${dockerRegistryToken}>pw.txt&&${dockerLoginCmdWin} && ${dockerTagCmd} && ${dockerPushCmd} && del pw.txt"
	} else {
		def dockerLoginCmdLin = "set -x; echo \"${dockerRegistryToken}\" | docker login --username ${dockerRegistryUsername} --password-stdin ${dockerRegistryHost}"
		commandLine 'sh', '-c', "${dockerLoginCmdLin} && ${dockerTagCmd} && ${dockerPushCmd}"
	}
}

*/