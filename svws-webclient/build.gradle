import org.apache.tools.ant.filters.ReplaceTokens

plugins {
	id 'svws.gradle.node.plugin'
}

configurations {
	api_test
	core
	core_test
	ui
	client
	client_test
	package_json
}

dependencies {
	api_test files(
		'config/core/package-template.json', 
		'config/core/vite.config-template.ts', 
		'config/core/vitest.config-template.ts'
	)
	core files(
		'config/core/package-template.json'
	)
	core_test files(
		'config/core/package-template.json', 
		'config/core/vite.config-template.ts', 
		'config/core/vitest.config-template.ts'
	)
	ui files(
		'config/ui/package-template.json', 
	)
	client files(
		'config/client/package-template.json', 
		'config/client/version-template.ts',
	)
	client_test files(
		'config/client/package-template.json', 
	)
	package_json files(
		'package.json',
		'src/api-test/ts/package.json',
		'src/core/ts/package.json',
		'src/core-test/ts/package.json',
		'src/ui/package.json',
		'src/client/ts/package.json',
		'src/client-test/ts/package.json'
	)
}

project.ext.npm_properties = [
	npm_organization: "svws-nrw",
	npm_packagename_apitest: "svws-api-test",
	npm_packagename_core: "svws-core",
	npm_packagename_ui: "svws-ui",
	npm_packagename_client: "svws-client",
	npm_description_apitest: "SVWS-Server-Projekt: API Tests",
	npm_description_client: "SVWS-Server-Projekt: client",
	npm_description_ui: "SVWS-Server-Projekt: UI-Komponenten",
	npm_description_core: "SVWS-Server-Projekt: Generierter Code f√ºr die Client-API und transpilierter Server-Code zur Verwendung in Clients",
	npm_exclude_from_tests: 'api-test","browser-test',
	npm_exclude_from_api_tests: 'core-test","client-test","browser-test',
	npm_author: "MSB NRW",
	npm_license: "BSD-3-Clause",
	ts_out: ".",
	coverage_out: "../../../build/coverage/",
	version: "$project.version"
]

task copyConfigApiTest(type: Copy) {
	group "build"
	from configurations.api_test
	into "$projectDir/src/api-test/ts"
	inputs.files configurations.api_test.files
	inputs.properties project.ext.npm_properties
	rename(/(\S+)-template(\S+)/, '$1$2')
	filteringCharset = 'UTF-8'
	filter(ReplaceTokens, tokens: [
		npm_organization: project.ext.npm_properties.npm_organization.toString(),
		npm_package: project.ext.npm_properties.npm_packagename_apitest.toString(),
		npm_description: project.ext.npm_properties.npm_description_apitest.toString(),
		npm_author: project.ext.npm_properties.npm_author,
		npm_license: project.ext.npm_properties.npm_license,
		ts_out: project.ext.npm_properties.ts_out,
		coverage_out: project.ext.npm_properties.coverage_out.toString() + project.ext.npm_properties.npm_packagename_apitest.toString(),
		version: project.ext.npm_properties.version.toString(),
		vitest_excludes: project.ext.npm_properties.npm_exclude_from_api_tests,
		modulename: project.ext.npm_properties.npm_packagename_apitest.toString().replace("svws-", "")//TODO beautify
	])
}

task copyConfigCore(type: Copy) {
	group "build"
	from configurations.core
	into "$projectDir/src/core/ts"
	inputs.files configurations.core.files
	inputs.properties project.ext.npm_properties
	rename(/(\S+)-template(\S+)/, '$1$2')
	filteringCharset = 'UTF-8'
	filter(ReplaceTokens, tokens: [
		npm_organization: project.ext.npm_properties.npm_organization.toString(),
		npm_package: project.ext.npm_properties.npm_packagename_core.toString(),
		npm_description: project.ext.npm_properties.npm_description_core.toString(),
		npm_author: project.ext.npm_properties.npm_author.toString(),
		npm_license: project.ext.npm_properties.npm_license.toString(),
		ts_out: project.ext.npm_properties.ts_out.toString(),
		version: project.ext.npm_properties.version.toString(),
		vitest_excludes: project.ext.npm_properties.npm_exclude_from_tests.toString(),
		modulename: project.ext.npm_properties.npm_packagename_core.toString().replace("svws-", "")//TODO beautify
	])
}

task copyConfigCoreTest(type: Copy) {
	group "build"
	from configurations.core_test
	into "$projectDir/src/core-test/ts"
	inputs.files configurations.core_test.files
	inputs.properties project.ext.npm_properties
	rename(/(\S+)-template(\S+)/, '$1$2')
	filteringCharset = 'UTF-8'
	filter(ReplaceTokens, tokens: [
		npm_organization: project.ext.npm_properties.npm_organization.toString(),
		npm_package: project.ext.npm_properties.npm_packagename_core.toString() + '-test',
		npm_description: project.ext.npm_properties.npm_description_core.toString() + ' (Tests)',
		npm_author: project.ext.npm_properties.npm_author,
		npm_license: project.ext.npm_properties.npm_license,
		ts_out: project.ext.npm_properties.ts_out,
		coverage_out: project.ext.npm_properties.coverage_out.toString() + project.ext.npm_properties.npm_packagename_core.toString(),
		version: project.ext.npm_properties.version.toString(),
		vitest_excludes: project.ext.npm_properties.npm_exclude_from_tests.toString(),
		modulename: project.ext.npm_properties.npm_packagename_core.toString().replace("svws-", "")//TODO beautify
	])
}

task copyConfigUi(type: Copy) {
	group "build"
	from configurations.ui
	into "$projectDir/src/ui/ts"
	inputs.files configurations.ui.files
	inputs.properties project.ext.npm_properties
	rename(/(\S+)-template(\S+)/, '$1$2')
	filteringCharset = 'UTF-8'
	filter(ReplaceTokens, tokens: [
		npm_organization: project.ext.npm_properties.npm_organization.toString(),
		npm_package: project.ext.npm_properties.npm_packagename_ui.toString(),
		npm_description: project.ext.npm_properties.npm_description_ui.toString(),
		npm_author: project.ext.npm_properties.npm_author.toString(),
		npm_license: project.ext.npm_properties.npm_license.toString(),
		ts_out: project.ext.npm_properties.ts_out.toString(),
		version: project.ext.npm_properties.version.toString(),
		vitest_excludes: project.ext.npm_properties.npm_exclude_from_tests.toString(),
		modulename: project.ext.npm_properties.npm_packagename_ui.toString().replace("svws-", "")//TODO beautify
	])
}

task copyConfigClient(type: Copy) {
	group "build"
	from configurations.client
	into "$projectDir/src/client/ts"
	inputs.files configurations.client.files
	inputs.properties project.ext.npm_properties
	rename(/(\S+)-template(\S+)/, '$1$2')
	filteringCharset = 'UTF-8'
	filter(ReplaceTokens, tokens: [
		npm_organization: project.ext.npm_properties.npm_organization.toString(),
		npm_package: project.ext.npm_properties.npm_packagename_client.toString(),
		npm_description: project.ext.npm_properties.npm_description_client.toString(),
		npm_author: project.ext.npm_properties.npm_author.toString(),
		npm_license: project.ext.npm_properties.npm_license.toString(),
		ts_out: project.ext.npm_properties.ts_out.toString(),
		version: project.ext.npm_properties.version.toString(),
		vitest_excludes: project.ext.npm_properties.npm_exclude_from_tests.toString(),
		modulename: project.ext.npm_properties.npm_packagename_client.toString().replace("svws-", "")//TODO beautify
	])
}

task copyConfigClientTest(type: Copy) {
	group "build"
	from configurations.client_test
	into "$projectDir/src/client-test/ts"
	inputs.files configurations.client_test.files
	inputs.properties project.ext.npm_properties
	rename(/(\S+)-template(\S+)/, '$1$2')
	filteringCharset = 'UTF-8'
	filter(ReplaceTokens, tokens: [
		npm_organization: project.ext.npm_properties.npm_organization.toString(),
		npm_package: project.ext.npm_properties.npm_packagename_client.toString() + '-test',
		npm_description: project.ext.npm_properties.npm_description_client.toString() + " (Tests)",
		npm_author: project.ext.npm_properties.npm_author.toString(),
		npm_license: project.ext.npm_properties.npm_license.toString(),
		ts_out: project.ext.npm_properties.ts_out.toString(),
		coverage_out: project.ext.npm_properties.coverage_out.toString() + project.ext.npm_properties.npm_packagename_client.toString(),
		version: project.ext.npm_properties.version.toString(),
		vitest_excludes: project.ext.npm_properties.npm_exclude_from_tests.toString(),
		modulename: project.ext.npm_properties.npm_packagename_client.toString().replace("svws-", "")//TODO beautify
	])
}

task copyConfig {
	group "build"
    dependsOn copyConfigApiTest, copyConfigCore, copyConfigCoreTest, copyConfigUi, copyConfigClient, copyConfigClientTest
}

task npmInstallDev(type: NpmInstall) {
    dependsOn project(':svws-transpile').tasks.assemble, copyConfig;
    inputs.files configurations.package_json.files
}

task assembleCore(type: NpmRun) {
	dependsOn npmInstallDev, ':svws-transpile:assemble', copyConfigCore
	group "build"
	args = ['build']
	inputs.files fileTree("$projectDir/src/core/ts").matching { exclude "dist" }, file("$rootDir/svws-transpiler/src/main/resources/typescript")
	outputs.dir file("$projectDir/src/core/ts/dist")
	workingDir = file("$projectDir/src/core/ts")
}

task assembleUi(type: NpmRun) {
	dependsOn npmInstallDev, copyConfigUi
	group "build"
	args = ['build']
	inputs.files fileTree("$projectDir/src/ui/ts").matching { exclude "dist", ".histoire" } 
	outputs.dir file("$projectDir/src/ui/ts/dist")
	workingDir = file("$projectDir/src/ui/ts")
}

task assembleUiHistoire(type: NpmRun) {
	dependsOn assembleUi
	group "build"
	args = ['story:build']
	inputs.files fileTree("$projectDir/src/ui/ts").matching { exclude "dist", ".histoire" } 
	outputs.dir file("$projectDir/src/ui/ts/.histoire")
	workingDir = file("$projectDir/src/ui/ts")
}

task assembleClient(type: NpmRun) {
	dependsOn assembleCore
	dependsOn assembleUi
	dependsOn assembleUiHistoire
	dependsOn copyConfigClient
	group "build"
	args = ['build']
	inputs.files fileTree("$projectDir/src/core/ts").matching { exclude "dist" }, 
		fileTree("$projectDir/src/ui/ts").matching { exclude "dist", ".histoire" }, 
		fileTree("$projectDir/src/components/ts").matching { exclude "dist", ".histoire" }, 
		file("$projectDir/src/client/ts")
	outputs.dir file("$buildDir/output")
	workingDir = file("$projectDir/src/client/ts")
}

assemble.dependsOn assembleCore
assemble.dependsOn assembleUi
assemble.dependsOn assembleClient

task testApi(type: NpmRun) {
	group "svws"
	dependsOn assembleCore, cleanTestApi, copyConfigApiTest
	inputs.files file("$projectDir/src/api-test/ts/src")
	outputs.dir file("$projectDir/build/coverage/api-test")
	args = [ 'test:runAgainstTestEnv' ]
	workingDir = file("$projectDir/src/api-test/ts")
	doFirst {
		mkdir file("$projectDir/build/coverage")
		mkdir file("$projectDir/build/coverage/api-test")
	}
}

task testCore(type: NpmRun) {
	group "svws"
	dependsOn assembleCore, copyConfigCoreTest
	inputs.files file("$projectDir/src/core-test/ts/src")
	outputs.dir file("$projectDir/build/coverage/core")
	args = [ 'test:run' ]
	workingDir = file("$projectDir/src/core-test/ts")
	doFirst {
		mkdir file("$projectDir/build/coverage")
		mkdir file("$projectDir/build/coverage/core")
	}
}

test.dependsOn testCore

task doZip(type: Zip) {
	dependsOn assembleClient
    archiveFileName = "SVWS-Client.zip"
    destinationDirectory = file("$buildDir")
    from "$buildDir/output"
}

assemble.dependsOn doZip


task cleanCore(type: Delete) {
	delete 'src/core/ts/dist'
}

task cleanUi(type: Delete) {
	delete 'src/ui/ts/dist'
}

task cleanClient(type: Delete) {
	delete 'src/client/ts/dist'
}

clean.dependsOn cleanCore
clean.dependsOn cleanUi
clean.dependsOn cleanClient


task copyNexusNpmrc(type: Copy) {
	dependsOn assemble
	mustRunAfter publish
	group "build"
	from "$projectDir/.npmrc.nexus"
	into "$projectDir/"
	inputs.files "$projectDir/.npmrc.nexus"
	outputs.files "$projectDir/.npmrc"
	rename(".npmrc.nexus", ".npmrc")
}

task publishNexusCore(type: NpmPublish) {
	dependsOn copyNexusNpmrc
	group "publishing"
	workingDir = file("$projectDir/src/core/ts")
	repository = "https://artifactory.svws-nrw.de/repository/npm-private/"
	actor = project.ext.getNexusActor()
	token = project.ext.getNexusToken()
	scopePublic = false
}

task publishNexusUi(type: NpmPublish) {
	dependsOn copyNexusNpmrc
	group "publishing"
	workingDir = file("$projectDir/src/ui/ts")
	repository = "https://artifactory.svws-nrw.de/repository/npm-private/"
	actor = project.ext.getNexusActor()
	token = project.ext.getNexusToken()
	scopePublic = false
}

task publishNexusClient(type: NpmPublish) {
	dependsOn copyNexusNpmrc
	group "publishing"
	workingDir = file("$projectDir/src/client/ts")
	repository = "https://artifactory.svws-nrw.de/repository/npm-private/"
	actor = project.ext.getNexusActor()
	token = project.ext.getNexusToken()
	scopePublic = false
}

task copyNpmNpmrc(type: Copy) {
	dependsOn publishNexusCore, publishNexusUi, publishNexusClient
	group "build"
	from "$projectDir/.npmrc.npm"
	into "$projectDir/"
	inputs.files "$projectDir/.npmrc.npm"
	outputs.files "$projectDir/.npmrc"
	rename(".npmrc.npm", ".npmrc")
}

task publishNpmCore(type: NpmPublish) {
	dependsOn copyNpmNpmrc
	group "publishing"
	workingDir = file("$projectDir/src/core/ts")
	repository = "https://registry.npmjs.org/"
	token = project.ext.getNpmToken()
	scopePublic = true
	tokenOnly = true
}

task publishNpmUi(type: NpmPublish) {
	dependsOn copyNpmNpmrc
	group "publishing"
	workingDir = file("$projectDir/src/ui/ts")
	repository = "https://registry.npmjs.org/"
	token = project.ext.getNpmToken()
	scopePublic = true
	tokenOnly = true
}

task publishNpmClient(type: NpmPublish) {
	dependsOn copyNpmNpmrc
	group "publishing"
	workingDir = file("$projectDir/src/client/ts")
	repository = "https://registry.npmjs.org/"
	token = project.ext.getNpmToken()
	scopePublic = true
	tokenOnly = true
}

publishReleaseAll.dependsOn publishNexusCore
publishReleaseAll.dependsOn publishNexusUi
publishReleaseAll.dependsOn publishNexusClient
publishReleaseAll.dependsOn publishNpmCore
publishReleaseAll.dependsOn publishNpmUi
publishReleaseAll.dependsOn publishNpmClient

project.tasks.withType(PublishToMavenRepository).configureEach {
  dependsOn copyNexusNpmrc, copyNpmNpmrc
}

project.tasks.withType(Sign).configureEach {
  dependsOn copyNexusNpmrc, copyNpmNpmrc
}


publishing {
    repositories {
        maven {
            name = "GitHubPackagesSVWSClient"
            url = "https://maven.pkg.github.com/SVWS-NRW/SVWS-Server"
            credentials {
            	username = getGithubActor()
                password = getGithubToken()
            }
        }
    }
    publications {
        mavenClientZip(MavenPublication) {
            artifact doZip
            artifactId = 'svws-client'
            pom {
                name = 'SVWS-Client'
                description = 'Stellt den SVWS-Client zur Verf√ºgung.'
                url = 'http://www.svws.nrw.de'
                licenses {
                    license {
                        name = 'BSD-3-Clause'
                        url = 'https://opensource.org/licenses/BSD-3-Clause'
                    }
                }
                scm {
                    connection = 'scm:git@github.com/SVWS-NRW/SVWS-Server'
                    developerConnection = 'scm:git@github.com/SVWS-NRW/SVWS-Server.git'
                    url = 'https://github.com/SVWS-NRW/SVWS-Server.git'
                }
                developers {
                    developer {
                        id = 'svws-nrw'
                        name = 'Schulverwaltung NRW'
                        email = 'npm@svws-nrw.de'
                    }
                }
            }
        }
    }
}
