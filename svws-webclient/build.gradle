import org.apache.tools.ant.filters.ReplaceTokens

plugins {
	id 'svws.gradle.node.plugin'
}

configurations {
    ts_lib
    ts_lib_test
    ui_components
	webclient
	webclient_test
	package_json
}

dependencies {
	ts_lib files(
		'config/ts-lib/package-template.json'
	)
	ts_lib_test files(
		'config/ts-lib/package-template.json', 
		'config/ts-lib/vite.config-template.ts', 
		'config/ts-lib/vitest.config-template.ts'
	)
	ui_components files(
		'config/ui-components/package-template.json', 
	)
	webclient files(
		'config/webclient/package-template.json', 
		'config/webclient/version-template.ts',
	)
	webclient_test files(
		'config/webclient/package-template.json', 
	)
	package_json files(
		'package.json',
		'src/ts-lib/ts/package.json',
		'src/ts-lib-test/ts/package.json',
		'src/ui-components/ts/package.json',
		'src/webclient/ts/package.json',
		'src/webclient-test/ts/package.json'
	)
}

project.ext.npm_properties = [
	npm_organization: "svws-nrw",
	npm_packagename_ts_lib: "svws-core-ts",
	npm_packagename_ui_components: "svws-ui",
	npm_packagename_webclient: "svws-client",
	npm_description_webclient: "SVWS-Server-Projekt: Webclient",
	npm_description_ui_components: "SVWS-Server-Projekt: UI-Komponenten",
	npm_description_ts_lib: "SVWS-Server-Projekt: Generierter Code f√ºr die Client-API und transpilierter Server-Code zur Verwendung in Clients",
	npm_author: "MSB NRW",
	npm_license: "BSD-3-Clause",
	ts_out: ".",
	coverage_out: "../../../build/coverage/",
	version: "$project.version"
]

task copyConfigTsLib(type: Copy) {
	group "build"
	from configurations.ts_lib
	into "$projectDir/src/ts-lib/ts"
	inputs.files configurations.ts_lib.files
	inputs.properties project.ext.npm_properties
	rename(/(\S+)-template(\S+)/, '$1$2')
	filteringCharset = 'UTF-8'
	filter(ReplaceTokens, tokens: [
		npm_organization: project.ext.npm_properties.npm_organization.toString(),
		npm_package: project.ext.npm_properties.npm_packagename_ts_lib.toString(),
		npm_description: project.ext.npm_properties.npm_description_ts_lib.toString(),
		npm_author: project.ext.npm_properties.npm_author.toString(),
		npm_license: project.ext.npm_properties.npm_license.toString(),
		ts_out: project.ext.npm_properties.ts_out.toString(),
		version: project.ext.npm_properties.version.toString()
	])
}

task copyConfigTsLibTest(type: Copy) {
	group "build"
	from configurations.ts_lib_test
	into "$projectDir/src/ts-lib-test/ts"
	inputs.files configurations.ts_lib_test.files
	inputs.properties project.ext.npm_properties
	rename(/(\S+)-template(\S+)/, '$1$2')
	filteringCharset = 'UTF-8'
	filter(ReplaceTokens, tokens: [
		npm_organization: project.ext.npm_properties.npm_organization.toString(),
		npm_package: project.ext.npm_properties.npm_packagename_ts_lib.toString() + '-test',
		npm_description: project.ext.npm_properties.npm_description_ts_lib.toString() + ' (Tests)',
		npm_author: project.ext.npm_properties.npm_author,
		npm_license: project.ext.npm_properties.npm_license,
		ts_out: project.ext.npm_properties.ts_out,
		coverage_out: project.ext.npm_properties.coverage_out.toString() + project.ext.npm_properties.npm_packagename_ts_lib.toString(),
		version: project.ext.npm_properties.version.toString()
	])
}

task copyConfigUiComponents(type: Copy) {
	group "build"
	from configurations.ui_components
	into "$projectDir/src/ui-components/ts"
	inputs.files configurations.ui_components.files
	inputs.properties project.ext.npm_properties
	rename(/(\S+)-template(\S+)/, '$1$2')
	filteringCharset = 'UTF-8'
	filter(ReplaceTokens, tokens: [
		npm_organization: project.ext.npm_properties.npm_organization.toString(),
		npm_package: project.ext.npm_properties.npm_packagename_ui_components.toString(),
		npm_description: project.ext.npm_properties.npm_description_ui_components.toString(),
		npm_author: project.ext.npm_properties.npm_author.toString(),
		npm_license: project.ext.npm_properties.npm_license.toString(),
		ts_out: project.ext.npm_properties.ts_out.toString(),
		version: project.ext.npm_properties.version.toString()
	])
}

task copyConfigWebclient(type: Copy) {
	group "build"
	from configurations.webclient
	into "$projectDir/src/webclient/ts"
	inputs.files configurations.webclient.files
	inputs.properties project.ext.npm_properties
	rename(/(\S+)-template(\S+)/, '$1$2')
	filteringCharset = 'UTF-8'
	filter(ReplaceTokens, tokens: [
		npm_organization: project.ext.npm_properties.npm_organization.toString(),
		npm_package: project.ext.npm_properties.npm_packagename_webclient.toString(),
		npm_description: project.ext.npm_properties.npm_description_webclient.toString(),
		npm_author: project.ext.npm_properties.npm_author.toString(),
		npm_license: project.ext.npm_properties.npm_license.toString(),
		ts_out: project.ext.npm_properties.ts_out.toString(),
		version: project.ext.npm_properties.version.toString()
	])
}

task copyConfigWebclientTest(type: Copy) {
	group "build"
	from configurations.webclient_test
	into "$projectDir/src/webclient-test/ts"
	inputs.files configurations.webclient_test.files
	inputs.properties project.ext.npm_properties
	rename(/(\S+)-template(\S+)/, '$1$2')
	filteringCharset = 'UTF-8'
	filter(ReplaceTokens, tokens: [
		npm_organization: project.ext.npm_properties.npm_organization.toString(),
		npm_package: project.ext.npm_properties.npm_packagename_webclient.toString() + '-test',
		npm_description: project.ext.npm_properties.npm_description_webclient.toString() + " (Tests)",
		npm_author: project.ext.npm_properties.npm_author.toString(),
		npm_license: project.ext.npm_properties.npm_license.toString(),
		ts_out: project.ext.npm_properties.ts_out.toString(),
		coverage_out: project.ext.npm_properties.coverage_out.toString() + project.ext.npm_properties.npm_packagename_webclient.toString(),
		version: project.ext.npm_properties.version.toString()
	])
}

task copyConfig {
	group "build"
    dependsOn copyConfigTsLib, copyConfigTsLibTest, copyConfigUiComponents, copyConfigWebclient, copyConfigWebclientTest
}

task npmInstallDev(type: NpmInstall) {
    dependsOn project(':svws-transpile').tasks.assemble, copyConfig;
    inputs.files configurations.package_json.files
}

task assembleTSLib(type: NpmRun) {
	dependsOn npmInstallDev, ':svws-transpile:assemble', copyConfigTsLib
	group "build"
	args = ['build']
	inputs.files fileTree("$projectDir/src/ts-lib/ts").matching { exclude "dist" }, file("$rootDir/svws-transpiler/src/main/resources/typescript")
	outputs.dir file("$projectDir/src/ts-lib/ts/dist")
	workingDir = file("$projectDir/src/ts-lib/ts")
}

task assembleUIComponents(type: NpmRun) {
	dependsOn npmInstallDev, copyConfigUiComponents
	group "build"
	args = ['build']
	inputs.files fileTree("$projectDir/src/ui-components/ts").matching { exclude "dist", ".histoire" } 
	outputs.dir file("$projectDir/src/ui-components/ts/dist")
	workingDir = file("$projectDir/src/ui-components/ts")
}

task assembleUIComponentsHistoire(type: NpmRun) {
	dependsOn assembleUIComponents
	group "build"
	args = ['story:build']
	inputs.files fileTree("$projectDir/src/ui-components/ts").matching { exclude "dist", ".histoire" } 
	outputs.dir file("$projectDir/src/ui-components/ts/.histoire")
	workingDir = file("$projectDir/src/ui-components/ts")
}

task assembleWebClient(type: NpmRun) {
	dependsOn assembleTSLib
	dependsOn assembleUIComponents
	dependsOn assembleUIComponentsHistoire
	dependsOn copyConfigWebclient
	group "build"
	args = ['build']
	inputs.files file("$projectDir/src/webclient/ts")
	outputs.dir file("$buildDir/output")
	workingDir = file("$projectDir/src/webclient/ts")
}

assemble.dependsOn assembleTSLib
assemble.dependsOn assembleUIComponents
assemble.dependsOn assembleWebClient

task testTSLib(type: NpmRun) {
	group "svws"
	dependsOn assembleTSLib, copyConfigTsLibTest
	inputs.files file("$projectDir/src/ts-lib-test/ts/src")
	outputs.dir file("$projectDir/build/coverage/ts-lib")
	args = [ 'test:run' ]
	workingDir = file("$projectDir/src/ts-lib-test/ts")
	doFirst {
		mkdir file("$projectDir/build/coverage")
		mkdir file("$projectDir/build/coverage/ts-lib")
	}
}

test.dependsOn testTSLib

task doZip(type: Zip) {
	dependsOn assembleWebClient
    archiveFileName = "SVWS-Client.zip"
    destinationDirectory = file("$buildDir")
    from "$buildDir/output"
}

assemble.dependsOn doZip


task cleanTsLib(type: Delete) {
	delete 'src/ts-lib/ts/dist'
}

task cleanUIComponents(type: Delete) {
	delete 'src/ui-components/ts/dist'
}

task cleanWebClient(type: Delete) {
	delete 'src/webclient/ts/dist'
}

clean.dependsOn cleanTsLib
clean.dependsOn cleanUIComponents
clean.dependsOn cleanWebClient


task copyNexusNpmrc(type: Copy) {
	dependsOn assemble
	group "build"
	from "$projectDir/.npmrc.nexus"
	into "$projectDir/"
	inputs.files "$projectDir/.npmrc.nexus"
	outputs.files "$projectDir/.npmrc"
	rename(".npmrc.nexus", ".npmrc")
}

task publishNexusTsLib(type: NpmPublish) {
	dependsOn copyNexusNpmrc
	group "publishing"
	workingDir = file("$projectDir/src/ts-lib/ts")
	repository = "https://artifactory.svws-nrw.de/repository/npm-private/"
	actor = project.ext.getNexusActor()
	token = project.ext.getNexusToken()
	scopePublic = false
}

task publishNexusUiComponents(type: NpmPublish) {
	dependsOn copyNexusNpmrc
	group "publishing"
	workingDir = file("$projectDir/src/ui-components/ts")
	repository = "https://artifactory.svws-nrw.de/repository/npm-private/"
	actor = project.ext.getNexusActor()
	token = project.ext.getNexusToken()
	scopePublic = false
}

task publishNexusWebClient(type: NpmPublish) {
	dependsOn copyNexusNpmrc
	group "publishing"
	workingDir = file("$projectDir/src/webclient/ts")
	repository = "https://artifactory.svws-nrw.de/repository/npm-private/"
	actor = project.ext.getNexusActor()
	token = project.ext.getNexusToken()
	scopePublic = false
}

task copyNpmNpmrc(type: Copy) {
	dependsOn publishNexusTsLib, publishNexusUiComponents, publishNexusWebClient
	group "build"
	from "$projectDir/.npmrc.npm"
	into "$projectDir/"
	inputs.files "$projectDir/.npmrc.npm"
	outputs.files "$projectDir/.npmrc"
	rename(".npmrc.npm", ".npmrc")
}

task publishNpmTsLib(type: NpmPublish) {
	dependsOn copyNpmNpmrc
	group "publishing"
	workingDir = file("$projectDir/src/ts-lib/ts")
	repository = "https://registry.npmjs.org/"
	token = project.ext.getNpmToken()
	scopePublic = true
	tokenOnly = true
}

task publishNpmUiComponents(type: NpmPublish) {
	dependsOn copyNpmNpmrc
	group "publishing"
	workingDir = file("$projectDir/src/ui-components/ts")
	repository = "https://registry.npmjs.org/"
	token = project.ext.getNpmToken()
	scopePublic = true
	tokenOnly = true
}

task publishNpmWebClient(type: NpmPublish) {
	dependsOn copyNpmNpmrc
	group "publishing"
	workingDir = file("$projectDir/src/webclient/ts")
	repository = "https://registry.npmjs.org/"
	token = project.ext.getNpmToken()
	scopePublic = true
	tokenOnly = true
}

publishReleaseAll.dependsOn publishNexusTsLib
publishReleaseAll.dependsOn publishNexusUiComponents
publishReleaseAll.dependsOn publishNexusWebClient
publishReleaseAll.dependsOn publishNpmTsLib
publishReleaseAll.dependsOn publishNpmUiComponents
publishReleaseAll.dependsOn publishNpmWebClient


publishing {
    repositories {
        maven {
            name = "GitHubPackagesSVWSClient"
            url = "https://maven.pkg.github.com/SVWS-NRW/SVWS-Packages"
            credentials {
            	username = getGithubActor()
                password = getGithubToken()
            }
        }
    }
    publications {
        mavenClientZip(MavenPublication) {
            artifact  'build/SVWS-Client.zip'
            artifactId = 'svws-client'
            pom {
                name = 'SVWS-Client'
                description = 'Stellt den SVWS-Client zur Verf√ºgung.'
                url = 'http://www.svws.nrw.de'
                licenses {
                    license {
                        name = 'BSD-3-Clause'
                        url = 'https://opensource.org/licenses/BSD-3-Clause'
                    }
                }
                scm {
                    connection = 'scm:git@github.com/SVWS-NRW/SVWS-Packages'
                    developerConnection = 'scm:git@github.com/SVWS-NRW/SVWS-Packages.git'
                    url = 'https://github.com/SVWS-NRW/SVWS-Packages.git'
                }
            }
        }
    }
}
