import org.apache.tools.ant.filters.ReplaceTokens

plugins {
	id 'svws.gradle.node.plugin'
}

task assembleCore(type: NpmRun) {
	dependsOn rootProject.npmPrepare, project(':svws-transpile').tasks.assemble
	group "build"
	args = ['build']
	inputs.files fileTree("$projectDir/src/core/ts").matching { exclude "dist" }, file("$rootDir/svws-transpiler/src/main/resources/typescript")
	outputs.dir file("$projectDir/src/core/ts/dist")
	workingDir = file("$projectDir/src/core/ts")
}

task assembleUi(type: NpmRun) {
	dependsOn rootProject.npmPrepare
	group "build"
	args = ['build']
	inputs.files fileTree("$projectDir/src/ui/ts").matching { exclude "dist", ".histoire" } 
	outputs.dir file("$projectDir/src/ui/ts/dist")
	workingDir = file("$projectDir/src/ui/ts")
}

task assembleUiHistoire(type: NpmRun) {
	dependsOn assembleUi
	group "build"
	args = ['story:build']
	inputs.files fileTree("$projectDir/src/ui/ts").matching { exclude "dist", ".histoire" } 
	outputs.dir file("$projectDir/src/ui/ts/.histoire")
	workingDir = file("$projectDir/src/ui/ts")
}

task assembleClient(type: NpmRun) {
	dependsOn assembleCore
	dependsOn assembleUi
	dependsOn assembleUiHistoire
	group "build"
	args = ['build']
	inputs.files fileTree("$projectDir/src/core/ts").matching { exclude "dist" }, 
		fileTree("$projectDir/src/ui/ts").matching { exclude "dist", ".histoire" }, 
		fileTree("$projectDir/src/components/ts").matching { exclude "dist", ".histoire" }, 
		file("$projectDir/src/client/ts")
	outputs.dir file("$buildDir/output")
	workingDir = file("$projectDir/src/client/ts")
}

assemble.dependsOn assembleCore
assemble.dependsOn assembleUi
assemble.dependsOn assembleClient

task testApi(type: NpmRun) {
	group "svws"
	dependsOn assembleCore, cleanTestApi
	inputs.files file("$projectDir/src/api-test/ts/src")
	outputs.dir file("$projectDir/build/coverage/api-test")
	args = [ 'test:runAgainstTestEnv' ]
	workingDir = file("$projectDir/src/api-test/ts")
	doFirst {
		mkdir file("$projectDir/build/coverage")
		mkdir file("$projectDir/build/coverage/api-test")
	}
}

task testCore(type: NpmRun) {
	group "svws"
	dependsOn assembleCore
	inputs.files file("$projectDir/src/core-test/ts/src")
	outputs.dir file("$projectDir/build/coverage/core")
	args = [ 'test:run' ]
	workingDir = file("$projectDir/src/core-test/ts")
	doFirst {
		mkdir file("$projectDir/build/coverage")
		mkdir file("$projectDir/build/coverage/core")
	}
}

test.dependsOn testCore

task doZip(type: Zip) {
	dependsOn assembleClient
    archiveFileName = "SVWS-Client.zip"
    destinationDirectory = file("$buildDir")
    from "$buildDir/output"
}

assemble.dependsOn doZip


task cleanCore(type: Delete) {
	delete 'src/core/ts/dist'
}

task cleanUi(type: Delete) {
	delete 'src/ui/ts/dist'
}

task cleanClient(type: Delete) {
	delete 'src/client/ts/dist'
}

clean.dependsOn cleanCore
clean.dependsOn cleanUi
clean.dependsOn cleanClient


task copyNexusNpmrc(type: Copy) {
	dependsOn assemble
	mustRunAfter publish
	group "build"
	from "$projectDir/.npmrc.nexus"
	into "$projectDir/"
	inputs.files "$projectDir/.npmrc.nexus"
	outputs.files "$projectDir/.npmrc"
	rename(".npmrc.nexus", ".npmrc")
}

task publishNexusCore(type: NpmPublish) {
	dependsOn copyNexusNpmrc
	group "publishing"
	workingDir = file("$projectDir/src/core/ts")
	repository = "https://artifactory.svws-nrw.de/repository/npm-private/"
	actor = project.ext.getNexusActor()
	token = project.ext.getNexusToken()
	scopePublic = false
}

task publishNexusUi(type: NpmPublish) {
	dependsOn copyNexusNpmrc
	group "publishing"
	workingDir = file("$projectDir/src/ui/ts")
	repository = "https://artifactory.svws-nrw.de/repository/npm-private/"
	actor = project.ext.getNexusActor()
	token = project.ext.getNexusToken()
	scopePublic = false
}

task publishNexusClient(type: NpmPublish) {
	dependsOn copyNexusNpmrc
	group "publishing"
	workingDir = file("$projectDir/src/client/ts")
	repository = "https://artifactory.svws-nrw.de/repository/npm-private/"
	actor = project.ext.getNexusActor()
	token = project.ext.getNexusToken()
	scopePublic = false
}

task copyNpmNpmrc(type: Copy) {
	dependsOn publishNexusCore, publishNexusUi, publishNexusClient
	group "build"
	from "$projectDir/.npmrc.npm"
	into "$projectDir/"
	inputs.files "$projectDir/.npmrc.npm"
	outputs.files "$projectDir/.npmrc"
	rename(".npmrc.npm", ".npmrc")
}

task publishNpmCore(type: NpmPublish) {
	dependsOn copyNpmNpmrc
	group "publishing"
	workingDir = file("$projectDir/src/core/ts")
	repository = "https://registry.npmjs.org/"
	token = project.ext.getNpmToken()
	scopePublic = true
	tokenOnly = true
}

task publishNpmUi(type: NpmPublish) {
	dependsOn copyNpmNpmrc
	group "publishing"
	workingDir = file("$projectDir/src/ui/ts")
	repository = "https://registry.npmjs.org/"
	token = project.ext.getNpmToken()
	scopePublic = true
	tokenOnly = true
}

task publishNpmClient(type: NpmPublish) {
	dependsOn copyNpmNpmrc
	group "publishing"
	workingDir = file("$projectDir/src/client/ts")
	repository = "https://registry.npmjs.org/"
	token = project.ext.getNpmToken()
	scopePublic = true
	tokenOnly = true
}

publishReleaseAll.dependsOn publishNexusCore
publishReleaseAll.dependsOn publishNexusUi
publishReleaseAll.dependsOn publishNexusClient
publishReleaseAll.dependsOn publishNpmCore
publishReleaseAll.dependsOn publishNpmUi
publishReleaseAll.dependsOn publishNpmClient

project.tasks.withType(PublishToMavenRepository).configureEach {
  dependsOn copyNexusNpmrc, copyNpmNpmrc
}

project.tasks.withType(Sign).configureEach {
  dependsOn copyNexusNpmrc, copyNpmNpmrc
}


publishing {
    repositories {
        maven {
            name = "GitHubPackagesSVWSClient"
            url = "https://maven.pkg.github.com/SVWS-NRW/SVWS-Server"
            credentials {
            	username = getGithubActor()
                password = getGithubToken()
            }
        }
    }
    publications {
        mavenClientZip(MavenPublication) {
            artifact doZip
            artifactId = 'svws-client'
            pom {
                name = 'SVWS-Client'
                description = 'Stellt den SVWS-Client zur Verf√ºgung.'
                url = 'http://www.svws.nrw.de'
                licenses {
                    license {
                        name = 'BSD-3-Clause'
                        url = 'https://opensource.org/licenses/BSD-3-Clause'
                    }
                }
                scm {
                    connection = 'scm:git@github.com/SVWS-NRW/SVWS-Server'
                    developerConnection = 'scm:git@github.com/SVWS-NRW/SVWS-Server.git'
                    url = 'https://github.com/SVWS-NRW/SVWS-Server.git'
                }
                developers {
                    developer {
                        id = 'svws-nrw'
                        name = 'Schulverwaltung NRW'
                        email = 'npm@svws-nrw.de'
                    }
                }
            }
        }
    }
}
