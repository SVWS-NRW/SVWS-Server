plugins {
	id 'svws.gradle.node.plugin'
}

task assembleUi(type: NpmRun) {
	dependsOn rootProject.npmPrepare, project(':svws-webclient:core').tasks.assemble
	group "build"
	args = ['build']
	inputs.files fileTree("$projectDir").matching { exclude "build", "dist", ".histoire" }
	outputs.dir file("$projectDir/dist")
}

task assembleUiHistoire(type: NpmRun) {
	dependsOn assembleUi
	group "build"
	args = ['story:build']
	inputs.files fileTree("$projectDir").matching { exclude "build", "dist", ".histoire" }
	outputs.dir file("$projectDir/.histoire")
}

assemble.dependsOn assembleUi
build.dependsOn assembleUiHistoire

task cleanUi(type: Delete) {
	delete file("$projectDir/dist"), file("$projectDir/.histoire")
}

clean.dependsOn cleanUi

task publishNexusUi(type: NpmPublish) {
	dependsOn build
	group "publishing"
	npmrc = "$rootDir/.npmrc.nexus"
	repository = "https://artifactory.svws-nrw.de/repository/npm-private/"
	actor = project.ext.getNexusActor()
	token = project.ext.getNexusToken()
	scopePublic = false
}

task publishNpmUi(type: NpmPublish) {
	dependsOn build
	group "publishing"
	npmrc = "$rootDir/.npmrc.npm"
	repository = "https://registry.npmjs.org/"
	token = project.ext.getNpmToken()
	scopePublic = true
	tokenOnly = true
}

task testUi(type: NpmRun) {
	dependsOn ':svws-webclient:ui:assemble'
	group "testing"
	inputs.files fileTree(dir: "$projectDir/src/components/", includes: ["*.{vue}{ts}"]),
			file("$projectDir/src/test/ts/package.json"),
			file("$projectDir/src/test/ts/tsconfig.json"),
			file("$projectDir/src/test/ts/vueconfig.json"),
			file("$projectDir/src/test/ts/vitest.config.ts")
	outputs.dir file("$projectDir/build/testresults")
	args = [ 'test:run' ]
	doFirst {
		mkdir file("$projectDir/build/testresults")
	}
}

test.dependsOn testUi

publishReleaseAll.dependsOn publishNexusUi
publishReleaseAll.dependsOn publishNpmUi
