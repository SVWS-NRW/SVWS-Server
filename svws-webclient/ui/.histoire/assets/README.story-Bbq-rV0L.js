import{c as i,a as t,o as r}from"./index-Ypxb2S-y.js";const d={class:"prose"},c="top-top",u="Guide (Read me)",h="readme",m="ri:code-s-slash-line",p={__name:"README.story",setup(o,{expose:n}){return n({frontmatter:{group:"top-top",title:"Guide (Read me)",id:"readme",icon:"ri:code-s-slash-line"}}),(l,e)=>(r(),i("div",d,e[0]||(e[0]=[t(`<h1>SVWS UI Guide</h1><p>In diesem Guide werden die wichtigsten Informationen und Best Practices für die Entwicklung von UI-Komponenten für den SVWS Client zusammengefasst.</p><ul><li><a href="/story/color">Farben</a></li><li><a href="/story/icons">Icons</a></li><li><a href="#performance">Performance</a><ul><li><a href="#komponente-oder-nur-ein-div">Komponente oder nur ein <code>div</code>?</a></li><li><a href="#optimierungen">Optimierungen</a><ul><li><a href="#verwendung-von-v-once">Verwendung von <code>v-once</code></a></li><li><a href="#verwendung-von-v-if-und-v-show">Verwendung von <code>v-if</code> und <code>v-show</code></a></li></ul></li></ul></li><li><a href="#css-classes">CSS Classes</a><ul><li><a href="#svws-ui-component"><code>.svws-ui-component</code></a></li><li><a href="#svws-attribute"><code>.svws-attribute</code></a></li><li><a href="#verwendung-beider-kategorien">Verwendung beider Kategorien</a></li></ul></li></ul><h2>Performance</h2><p>Für den Client werden viele und teils komplexe Komponenten verwendet, die oft mehrfach gerendert werden. Um den Speicherverbrauch und die Ladezeiten zu optimieren, können schon einfache Änderungen große Auswirkungen haben.</p><h3>Komponente oder nur ein <code>div</code>?</h3><p>Eine Komponente kostet mehr Performance als einfache DOM-Nodes. Besonders verschachtelte Komponenten können schnell zu einem Problem werden. Daher sollte immer überlegt werden, ob eine Komponente wirklich notwendig ist.</p><p>Beispiel bei einer Tabelle: Zur Übersichtlichkeit und einfachen Verwendung an anderen Stellen außerhalb der Table-Komponente wird darin eine Zeile mit einer Row-Komponente gerendert. Jede Row hat mehrere Cells und davon braucht eine Cell eine Checkbox-Komponente.</p><p>Wenn es jetzt 100 Zeilen gibt, werden in diesem Beispiel 100 Row-Komponenten gerendert, jede mit 5 Cells und einer Checkbox-Komponente. Das sind 700 Komponenten, die gerendert werden müssen.</p><p>Wenn die Komponenten durch einfaches HTML Markup ersetzt werden, müssen nur noch 100 Komponenten gerendert werden. Das ist ein großer Unterschied.</p><p>Damit trotzdem eine einheitliche und einfache Verwendung möglich ist, sollen alle Komponenten hier dokumentiert werden.</p><p><em>Bitte beachte dazu die <a href="#css-classes">Guidelines zu CSS Classes</a>.</em></p><h3>Optimierungen</h3><h4>Verwendung von <code>v-once</code></h4><p>Damit wird das Element und alle darin enthaltenen Elemente nur einmal gerendert. Das ist besonders nützlich für Elemente, die sich nicht ändern, wie z.B. Überschriften.</p><p><em>Weitere Informationen dazu: <a href="https://vuejs.org/guide/best-practices/performance.html#v-once">Vue.js Guide</a></em></p><h4>Verwendung von <code>v-if</code> und <code>v-show</code></h4><p><code>v-if</code> ist performanter und sollte in den meisten Fällen verwendet werden, da <code>v-show</code> immer gerendert wird, aber nur mit CSS versteckt wird. <code>v-if</code> wird nur gerendert, wenn die Bedingung erfüllt ist.</p><p><code>v-show</code> benötigt beim initialen Render mehr Speicher, da die Komponente nur mit CSS versteckt wird. Dafür wird die Komponente nicht neu gerendert, wenn die Bedingung erfüllt ist.</p><h2>CSS Classes</h2><p>Um die <a href="#komponente-oder-nur-ein-div">Performance</a> zu verbessern, reduzieren wir die Anzahl der Komponenten und verwenden stattdessen einfache HTML Elemente mit einfachen und eindeutigen CSS Classes. Aber auch in den Komponenten selbst sollten die CSS Classes einheitlich sein.</p><p>Alle wiederverwendbare CSS Classes — auch, wenn sie voraussichtlich erstmal nicht an anderen Stellen verwendet werden — werden hier dokumentiert.</p><p>Für bessere Übersichtlichkeit im Code und einfacher Verwendung werden die CSS Classes in zwei Kategorien unterteilt:</p><ul><li><strong>.svws-ui-component</strong>: eindeutige, übergeordnete Class Names, damit “attributes” Styles nicht mit anderen Komponenten kollidieren.</li><li><strong>.svws-attribute</strong>: Styles für ein Attribut, das mehrfach in verschiedenen Kontexten verwendet werden kann.</li></ul><h3>.svws-ui-component</h3><p>Prefix mit <code>svws-ui-</code></p><table><thead><tr><th>Schema</th><th>Verwendung</th></tr></thead><tbody><tr><td><code>.svws-ui-name</code></td><td>Class für eine Komponente</td></tr><tr><td><code>.svws-ui-name--element</code></td><td>Eindeutige Class zur Differenzierung untergeordneter Elemente in einer Komponente. Beispiel <code>--header</code> und <code>--content</code></td></tr><tr><td><code>.svws-ui-name--element--subelement</code></td><td>Weitere Ebene. Beispiel <code>--header--title</code> und <code>--header--subtitle</code></td></tr><tr><td><code>.svws-ui-name--element--subelement--...</code></td><td>Wenn möglich vermeiden. Verschachtelungen sollten nicht zu komplex werden.</td></tr></tbody></table><p>Eine einzelne, eindeutige Komponenten-Class kann auch für untergeordnete Elemente einer Komponente verwendet werden, um komplex verschachtelte Namen zu vermeiden.</p><p>Beispiel: <s><code>.svws-ui-table--thead--tr--th</code></s> → einzelne Classes:</p><ul><li><code>.svws-ui-table</code></li><li><code>.svws-ui-thead</code></li><li><code>.svws-ui-tbody</code></li><li><code>.svws-ui-tfoot</code></li><li><code>.svws-ui-tr</code></li><li><code>.svws-ui-td</code></li><li><code>.svws-ui-th</code></li></ul><pre><code class="language-scss">.svws-ui-tr {
  @apply h-6;

  .svws-ui-thead &amp; {
    @apply h-8;
  }
}
</code></pre><h3>.svws-attribute</h3><p>Prefix mit <code>svws-</code></p><p>Beispiel: <code>.svws-active</code>, <code>.svws-disabled</code></p>`,34)])))}};export{p as default,c as group,m as icon,h as id,u as title};
