package de.svws_nrw.transpiler;

import java.util.List;
import java.util.ArrayList;

/**
 * The abstract super class of language plugins for the {@link Transpiler}.
 */
public abstract class TranspilerLanguagePlugin {

	/** The internal reference to the transpiler using this language plugin */
	protected final Transpiler transpiler;

	/** an ArrayList containing all the relative file names generated by this plugin */
	protected final ArrayList<String> outputFiles = new ArrayList<>();

	/** an ArrayList containing additional information whether the files are only used as types (used e.g. in the typescript plugin) */
	protected final ArrayList<Boolean> outputFilesTypeOnly = new ArrayList<>();


	/**
	 * This constructor is invoked on creating an new language plugin for the
	 * specified transpiler. The plugin is autmatically registered at the transpiler.
	 *
	 * @param transpiler   the transpiler using this plugin instance
	 */
	protected TranspilerLanguagePlugin(final Transpiler transpiler) {
		if (transpiler == null)
			throw new TranspilerException("Transpiler Error: A transpiler using the transpiler language plugin is required.");
		this.transpiler = transpiler;
		this.transpiler.addLanguagePlugin(this);
	}


	/**
	 * Returns the transpiler associated with this plugin
	 *
	 * @return the transpiler object used by this plugin
	 */
	public Transpiler getTranspiler() {
		return this.transpiler;
	}


	/**
	 * This method is invoked by the transpiler to start the transpiling process
	 * for this language plugin. It must be implemented by the language plugin.
	 */
	public abstract void transpile();


	/**
	 * Returns a list containing all the relative file names generated by this plugin.
	 *
	 * @return the filename list
	 */
	public List<String> getOutputFiles() {
		return this.outputFiles;
	}

	/**
	 * Returns a list containing the information whether the output files are used
	 * as types only for all the files generated by this plugin.
	 *
	 * @return the list
	 */
	public List<Boolean> getOutputFilesTypeOnly() {
		return this.outputFilesTypeOnly;
	}

}
