plugins {
	id 'svws.gradle.node.plugin'
}

configurations {
	implementation.extendsFrom(jetty, resteasy, swagger, validation)
	javacore
	javaapi
}
 
dependencies {
	implementation project(':svws-core')
	implementation project(':svws-db-utils')
	implementation project(':svws-openapi')

    implementation 'org.codehaus.plexus:plexus-utils:3.4.1'
    
    javacore fileTree(dir: "$rootDir/svws-core/src/main/java", includes: ['**/svws_nrw/core/**/*.java'], excludes: ['**/svws_nrw/core/transpiler/TranspilerDTO.java'])
    
    javaapi fileTree(dir: "$rootDir/svws-openapi/src/main/java", includes: ['**/svws_nrw/api/server/*.java', '**/svws_nrw/api/privileged/API*.java']) 
}

task removeTranspiledCode(type: Delete) {
	group "svws"
	delete fileTree(dir: "$rootDir/svws-webclient/core/src", includes: ["**/*.ts"]), fileTree(dir: "$rootDir/svws-transpiler/build/tmp/transpiler", includes: ["**/*.class"])
}

task prepareTranspile {
	doLast {
		file("build/transpiler-java-files.txt").text = configurations.javacore.files.toString().replace("[", "").replace("]", "").trim()
		file("build/transpiler-api-files.txt").text = configurations.javaapi.files.toString().replace("[", "").replace("]", "").trim()
	}
	group "svws"
	dependsOn compileJava
    inputs.files configurations.javacore.files, configurations.javaapi.files
    outputs.files "build/transpiler-java-files.txt", "build/transpiler-api-files.txt"
}

task transpile(type: JavaExec) {
	group = "svws"
	dependsOn prepareTranspile
    dependsOn project(":svws-core").tasks.assemble
    dependsOn project(":svws-openapi").tasks.assemble
    doFirst {
		delete fileTree(dir: "$rootDir/svws-webclient/core/src", includes: ["**/*.ts"]), fileTree(dir: "$rootDir/svws-transpiler/build/tmp/transpiler", includes: ["**/*.class"])
	}
    inputs.files "build/transpiler-java-files.txt", "build/transpiler-api-files.txt", sourceSets.main.resources.getSourceDirectories()
    outputs.dir "$rootDir/svws-webclient/core/src"
    description = "Transpiliert den Java-Code nach Type-/Javascript"
    classpath = sourceSets.main.runtimeClasspath
    mainClass = "de.svws_nrw.transpiler.app.CoreTranspiler"
    args "--output", "$rootDir/svws-webclient/core/src",
         "--ignore", "de.svws_nrw",
         "--javafiles", "build/transpiler-java-files.txt",
         "--apifiles", "build/transpiler-api-files.txt"
}

assemble.dependsOn transpile


task testTranspilerCore(type: NpmRun) {
	group "svws"
	dependsOn rootProject.npmPrepare, test
	mustRunAfter test
	workingDir file("$projectDir/src/test/ts")
	inputs.files fileTree(dir: "$projectDir/src/main/resources/typescript", includes: ["**/*.ts"]), 
		fileTree(dir: "$projectDir/src/test/ts/src", includes: ["**/*.test.ts", "**/*.bench.ts"]),
		file("$projectDir/src/test/ts/package.json"), file("$projectDir/src/test/ts/tsconfig.json"), file("$projectDir/src/test/ts/vitest.config.ts")
	outputs.dir file("$projectDir/build/coverage")
	args = [ 'test:run' ]
	doFirst {
		mkdir file("$projectDir/build/coverage")
	}
}

check.dependsOn testTranspilerCore


